<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Martin Klepsch</title><subtitle>Martin Klepsch's blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://www.martinklepsch.org/" type="text/html"></link><link href="https://www.martinklepsch.org/atom-2.xml" rel="self"></link><link href="https://www.martinklepsch.org/atom.xml" rel="first"></link><link href="https://www.martinklepsch.org/atom-5.xml" rel="last"></link><link href="https://www.martinklepsch.org/atom-3.xml" rel="next"></link><link href="https://www.martinklepsch.org/atom.xml" rel="previous"></link><updated>2020-05-16T11:17:12Z</updated><id>https://www.martinklepsch.org/</id><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author><entry><id>urn:uuid:bdabdf1d-742c-468f-89bb-032986a9d99f</id><title>Props, Children &amp; Component Lifecycle in Reagent</title><link href="https://www.martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html" type="text/html" title="Props, Children &amp; Component Lifecycle in Reagent" rel="alternate"></link><published>2016-05-19T00:00:00Z</published><updated>2016-05-19T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="Every now and then I come across the situation that I need to compare previous and next props passed to a Reagent component. Every time again I fail to find some docs and figure it out by tr..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html" rel="canonical"&gt;&lt;title&gt;Props, Children &amp; Component Lifecycle in Reagent — Martin Klepsch&lt;/title&gt;&lt;meta content="Props, Children &amp;amp; Component Lifecycle in Reagent" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Every now and then I come across the situation that I need to compare previous and next props passed to a Reagent component. Every time again I fail to find some docs and figure it out by tr..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Props, Children &amp;amp; Component Lifecycle in Reagent" name="twitter:title"&gt;&lt;meta content="Every now and then I come across the situation that I need to compare previous and next props passed to a Reagent component. Every time again I fail to find some docs and figure it out by tr..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/props-children-and-component-lifecycle-in-reagent.html" title="Permalink: Props, Children &amp;amp; Component Lifecycle in Reagent"&gt;May 2016&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Props, Children &amp; Component Lifecycle in Reagent&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;Every now and then I come across the situation that I need to compare previous and next props passed to a Reagent component. Every time again I fail to find some docs and figure it out by trial and error.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#props-vs-children" id="props-vs-children"&gt;&lt;/a&gt;Props vs. Children&lt;/h2&gt;
&lt;p&gt;In React &lt;strong&gt;everything&lt;/strong&gt; passed to a component is called &lt;code&gt;props&lt;/code&gt;. Children passed to components are passed as &lt;code&gt;props.children&lt;/code&gt;. In Reagent things are a bit different and Reagent’s hiccup syntax doesn’t explicitly separate the two:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;;; configuration and one child
[popup {:style :alert} [delete-confirmation]]
;; two children
[popup [alert-icon] [delete-confirmation]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Popup style=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;DeleteConfirmation&amp;gt;&amp;lt;/Popup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In React it is well-defined where you can access the &lt;code&gt;style&lt;/code&gt; parameter (&lt;code&gt;props.style&lt;/code&gt;) and how you can access the passed children (&lt;code&gt;props.children&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In Reagent things are a bit different: you have a function definition which takes a number of arguments which you can just refer to in the same way you can refer to any other function parameter. This makes thinking in functions a lot easier but also overshadows some of the underlying React behaviour.&lt;/p&gt;
&lt;p&gt;In a lifecycle handler like &lt;code&gt;:component-did-update&lt;/code&gt; accessing component arguments via the symbol they’ve been given in the functions argument vector doesn’t work:&lt;/p&gt;
&lt;p&gt;The moment you define components that are not simple render functions (remember those &lt;a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components"&gt;Form-2 and Form-3&lt;/a&gt; components?) all updates will pass their arguments to the components render function.&lt;/p&gt;
&lt;p&gt;The moment you render a component that has been created via &lt;code&gt;reagent.core/create-class&lt;/code&gt; all updates will pass their arguments to the &lt;code&gt;:reagent-render&lt;/code&gt; function, potentially triggering a re-render. The function that returned the result of &lt;code&gt;create-class&lt;/code&gt; is only ever called once at the time of mounting the component — your top-level &lt;code&gt;defn&lt;/code&gt; returns a component instead of being a render function itself. This is also &lt;a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-2--a-function-returning-a-function"&gt;why you need to repeat the arguments in the &lt;code&gt;:reagent-render&lt;/code&gt; arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#props-in-lifecycle-handlers" id="props-in-lifecycle-handlers"&gt;&lt;/a&gt;Props in Lifecycle Handlers&lt;/h2&gt;
&lt;p&gt;Now how do we get access to these props in a lifecycle handler? The quick answer is, we use &lt;code&gt;reagent.core/props&lt;/code&gt; — obvious, huh?&lt;/p&gt;
&lt;p&gt;One peculiarity about the &lt;code&gt;props&lt;/code&gt; function is that it expects the &lt;code&gt;props&lt;/code&gt; data to be the first argument to your function. Also it &lt;strong&gt;has to be a map&lt;/strong&gt; (if it’s not &lt;code&gt;props&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If the first argument to your component is not a map all arguments are interpreted as children and can be retrieved via &lt;code&gt;reagent.core/children&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So now we have the props for the current render, how do we access the previous ones? All previously passed arguments are passed to the lifecycle handler. Not as you might think though.&lt;/p&gt;
&lt;p&gt;If you have a component that has a signature like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;(defn my-comp [my-props more] …)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can access it’s previously passed arguments like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;:component-did-update (fn [comp [_ prev-props prev-more]] …))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;comp&lt;/code&gt; is a reference to the current component. The second argument which is being destructured here contains what we’re looking for. As far as I understood the first item is the component's constructor. The rest are the previously rendered inputs (again in React they’re all &lt;code&gt;props&lt;/code&gt;, in Reagent they’re &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;As you can see you can inspect all previous arguments to a component. The way you access them differs from the default React lifecycle method signatures so hopefully this post helps to clear up some confusion about this stuff. :)&lt;/p&gt;
&lt;aside&gt;Thanks to Jonas Enlund for reading a draft of this post and to Mike Thompson for his excellent Re-frame/Reagent docs.&lt;/aside&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, May 2016 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2016-05-19-props-children-and-component-lifecycle-in-reagent.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:e2aa0cae-c4ce-42c0-9052-f1b001e51c0e</id><title>Om/Next Reading List</title><link href="https://www.martinklepsch.org/posts/om-next-reading-list.html" type="text/html" title="Om/Next Reading List" rel="alternate"></link><published>2015-11-03T00:00:00Z</published><updated>2015-11-03T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/om-next-reading-list.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="A small dump of things I read to learn more about Om/Next. Most of these I stumbled upon while lurking in #om on the Clojurians Slack. Thinking in Relay This is Facebook&amp;apos;s high level overvie..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/om-next-reading-list.html" rel="canonical"&gt;&lt;title&gt;Om/Next Reading List — Martin Klepsch&lt;/title&gt;&lt;meta content="Om/Next Reading List" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="A small dump of things I read to learn more about Om/Next. Most of these I stumbled upon while lurking in #om on the Clojurians Slack. Thinking in Relay This is Facebook&amp;apos;s high level overvie..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/om-next-reading-list.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Om/Next Reading List" name="twitter:title"&gt;&lt;meta content="A small dump of things I read to learn more about Om/Next. Most of these I stumbled upon while lurking in #om on the Clojurians Slack. Thinking in Relay This is Facebook&amp;apos;s high level overvie..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/om-next-reading-list.html" title="Permalink: Om/Next Reading List"&gt;November 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Om/Next Reading List&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;A small dump of things I read to learn more about Om/Next. Most of these I stumbled upon while lurking in #om on the &lt;a href="http://clojurians.net/"&gt;Clojurians Slack&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#thinking-in-relay" id="thinking-in-relay"&gt;&lt;/a&gt;&lt;a href="https://facebook.github.io/relay/docs/thinking-in-relay.html"&gt;Thinking in Relay&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is Facebook's high level overview for Relay. It explains the reasoning for colocating queries and how data masking allows developers to write components that are not coupled to their location in the UI tree.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#omnext-quick-start" id="omnext-quick-start"&gt;&lt;/a&gt;&lt;a href="https://github.com/omcljs/om/wiki/Quick-Start-%28om.next%29"&gt;Om/Next Quick Start&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the official Om/Next quick start tutorial. It guides you through building a basic application with Om/Next and introduces the basic API for queries and mutations. After reading this you should have a rough idea what's being talked about in the next two reads.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#omnext-the-reconciler" id="omnext-the-reconciler"&gt;&lt;/a&gt;&lt;a href="https://medium.com/@kovasb/om-next-the-reconciler-af26f02a6fb4"&gt;Om/Next The Reconciler&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kovas Boguta who previously gave an Om/Next workshop with David Nolen wrote this introduction to the Om/Next reconciler. It covers the architectural role of the reconciler managing application state and communicating it to components. The reconciler also acts as an indexer of all components and, using their queries to build a depdency graph, knows when to update which components.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#omnext-overview" id="omnext-overview"&gt;&lt;/a&gt;&lt;a href="https://github.com/awkay/om/wiki/Om-Next-Overview"&gt;Om/Next Overview&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Written by Tony Kay this overview covers many practical aspects of writing queries and mutations. Before it goes into the nitty gritty details howvever there is another short &lt;em&gt;Problem → Solution&lt;/em&gt; section that nicely describes the concepts in Relay and Om/Next in prose.&lt;/p&gt;
&lt;p&gt;Now put all those links into Instapaper/Pocket &amp;amp; enjoy reading!&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, November 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-11-03-om-next-reading-list.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:a658e901-04ec-4ff4-a2d5-c8c72221e3e7</id><title>Parameterizing ClojureScript Builds</title><link href="https://www.martinklepsch.org/posts/parameterizing-clojurescript-builds.html" type="text/html" title="Parameterizing ClojureScript Builds" rel="alternate"></link><published>2015-08-11T00:00:00Z</published><updated>2015-08-11T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/parameterizing-clojurescript-builds.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="Just like with most server side software we often want to make minor changes to the behaviour of the code depending on the environment it&amp;apos;s run in. This post highlights language and compiler..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/parameterizing-clojurescript-builds.html" rel="canonical"&gt;&lt;title&gt;Parameterizing ClojureScript Builds — Martin Klepsch&lt;/title&gt;&lt;meta content="Parameterizing ClojureScript Builds" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Just like with most server side software we often want to make minor changes to the behaviour of the code depending on the environment it&amp;apos;s run in. This post highlights language and compiler..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/parameterizing-clojurescript-builds.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/2.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Parameterizing ClojureScript Builds" name="twitter:title"&gt;&lt;meta content="Just like with most server side software we often want to make minor changes to the behaviour of the code depending on the environment it&amp;apos;s run in. This post highlights language and compiler..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/2.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/parameterizing-clojurescript-builds.html" title="Permalink: Parameterizing ClojureScript Builds"&gt;August 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Parameterizing ClojureScript Builds&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;Just like with most server side software we often want to make minor changes to the behaviour of the code depending on the environment it's run in. This post highlights language and compiler features of ClojureScript making parameterized builds easy peasy.&lt;/p&gt;
&lt;p&gt;On servers environment variables are a go-to solution to set things like a database URI. In ClojureScript we don't have access to those. You can work around that with macros and emit code based on environment variables but this requires additional code and separate tools.&lt;/p&gt;
&lt;p&gt;With ClojureScript 1.7.48 (&lt;strong&gt;Update:&lt;/strong&gt; There was a bug in 1.7.48 &lt;code&gt;goog-define&lt;/code&gt;. Use 1.7.107 instead.) a new macro &lt;code&gt;goog-define&lt;/code&gt; has been added which allows build customization at compile time using plain compiler options. Let's walk through an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(ns your.app)
(goog-define api-uri &amp;quot;http://your.api.com&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;goog-define&lt;/code&gt; emits code that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/** @define {string} */
goog.define(&amp;quot;your.app.api_uri&amp;quot;,&amp;quot;http://your.api.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;goog.define&lt;/code&gt; function from Closure's standard library plus the JSDoc &lt;code&gt;@define&lt;/code&gt; annotation tell the Closure compiler that &lt;code&gt;your.app.api_uri&lt;/code&gt; is a constant that can be overridden at compile time.  To do so you just need to pass the appropriate &lt;code&gt;:closure-defines&lt;/code&gt; compiler option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:closure-defines {'your.app/api-uri &amp;quot;http://your-dev.api.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using Leinigen quoting is implicit so there is no quote necessary before the symbol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sometimes for debugging you may want to pass the Closure define as a string. If you decide to do so make sure it matches the string in the &lt;code&gt;goog.define&lt;/code&gt; call in your emitted Javascript (i.e. account for name mangling).&lt;/p&gt;
&lt;aside&gt;
Prior to 1.7.48 you could annotate things with &lt;code&gt;@define&lt;/code&gt; but without
using &lt;code&gt;goog.define&lt;/code&gt; overriding those defines is not possible when
using optimizations &lt;code&gt;:none&lt;/code&gt; effectively making them much less useful.
&lt;/aside&gt;
&lt;h3&gt;&lt;a href="#under-the-hood" id="under-the-hood"&gt;&lt;/a&gt;Under the hood&lt;/h3&gt;
&lt;p&gt;When compiling with &lt;code&gt;:advanced&lt;/code&gt; optimizations the Closure compiler will automatically replace all occurrences of your defined constants with their respective values. If this leads to unreachable branches in your code they will be removed as &lt;a href="https://developers.google.com/closure/compiler/docs/compilation_levels?hl=en#advanced_optimizations"&gt;dead code&lt;/a&gt; by the Closure compiler. Very handy to elide things like logging!&lt;/p&gt;
&lt;p&gt;Without any optimizations (&lt;code&gt;:none&lt;/code&gt;) &lt;code&gt;goog.define&lt;/code&gt; makes sure the right value is used. There are two global variables it takes into account for that: &lt;code&gt;CLOSURE_UNCOMPILED_DEFINES&lt;/code&gt; and &lt;code&gt;CLOSURE_DEFINES&lt;/code&gt;. When you override the default value using &lt;code&gt;:closure-defines&lt;/code&gt; the ClojureScript compiler prepends &lt;code&gt;CLOSURE_UNCOMPILED_DEFINES&lt;/code&gt; with your overridden define to your build causing &lt;code&gt;goog.define&lt;/code&gt; to use the value in there instead of the default value you defined in your source files.&lt;/p&gt;
&lt;p&gt;For details see &lt;a href="https://github.com/google/closure-library/blob/master/closure/goog/base.js#L147-L172"&gt;the source of goog.define&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, August 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-08-11-parameterizing-clojurescript-builds.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:3264b651-0aac-4e62-8751-77b88828f856</id><title>ClojureBridge Berlin</title><link href="https://www.martinklepsch.org/posts/clojurebridge-berlin.html" type="text/html" title="ClojureBridge Berlin" rel="alternate"></link><published>2015-07-24T00:00:00Z</published><updated>2015-07-24T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/clojurebridge-berlin.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="About two weeks ago something awesome happened: the very first ClojureBridge workshop in Berlin. After months of planning things finally got real.   ClojureBridge aims to increase diversity ..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/clojurebridge-berlin.html" rel="canonical"&gt;&lt;title&gt;ClojureBridge Berlin — Martin Klepsch&lt;/title&gt;&lt;meta content="ClojureBridge Berlin" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="About two weeks ago something awesome happened: the very first ClojureBridge workshop in Berlin. After months of planning things finally got real.   ClojureBridge aims to increase diversity ..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/clojurebridge-berlin.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="ClojureBridge Berlin" name="twitter:title"&gt;&lt;meta content="About two weeks ago something awesome happened: the very first ClojureBridge workshop in Berlin. After months of planning things finally got real.   ClojureBridge aims to increase diversity ..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/clojurebridge-berlin.html" title="Permalink: ClojureBridge Berlin"&gt;July 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;ClojureBridge Berlin&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;About two weeks ago something awesome happened: the very first ClojureBridge workshop in Berlin. After months of planning things finally got real.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/clojurebridge-group-picture.jpg" alt="ClojureBridge Berlin in it's entirety." /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClojureBridge aims to increase diversity within the Clojure community by offering free, beginner-friendly Clojure programming workshops for women.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Many of you probably got the &lt;em&gt;&amp;quot;news&amp;quot;&lt;/em&gt;: there's a lack of diversity in programming communities. Many communities acknowledge this and have created initiatives to fix it. The Ruby community has RailsBridge (and more) and other communties equally do their part in improving our industries diversity situation. Inspired by RailsBridge the Clojure community established ClojureBridge and has organized more than 20 workshops worldwide since.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#why-diversity" id="why-diversity"&gt;&lt;/a&gt;Why Diversity?&lt;/h3&gt;
&lt;p&gt;There are &lt;a href="http://www.ncwit.org/sites/default/files/resources/impactgenderdiversitytechbusinessperformance_print.pdf"&gt;endless amounts&lt;/a&gt; &lt;a href="http://newsoffice.mit.edu/2014/workplace-diversity-can-help-bottom-line-1007"&gt;of research&lt;/a&gt; why diversity is desirable but one of the reasons that seems most intuitive to me is that software is, after all, for humans. If we want to make great software for everyone then it can only be made by all of us and not by one priviliged monoculture.&lt;/p&gt;
&lt;!-- It's the typical *solve-your-own-problem* startup talk with a twist. --&gt;
&lt;h3&gt;&lt;a href="#clojurebridge-berlin" id="clojurebridge-berlin"&gt;&lt;/a&gt;ClojureBridge Berlin&lt;/h3&gt;
&lt;p&gt;ClojureBridge workshops consist of one evening installing required software (Friday) and a full day of actually learning things (Saturday). Besides some problems with our pizza delivery both days went really well. We had great vegan and vegetarian lunch on Saturday, fun ClojureBridge cupcakes and after the coffee machine broke on Friday people brought lots of coffee making equipment to the event on Saturday. You could say we had a little &lt;a href="https://en.wikipedia.org/wiki/Third_wave_of_coffee"&gt;third wave coffee&lt;/a&gt; workshop as well.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/clojurebridge-cupcakes.jpg" alt="We got some sweet cupcakes!" /&gt;&lt;/p&gt;
&lt;p&gt;On Saturday we initially had 2-3 coaches that &amp;quot;didn't have a job&amp;quot; and we were afraid they might feel superflous but the need for some additional help quickly arised when some learners got ahead of the rest of their group. In the end we were very happy that we had the flexibility of not having assigned all coaches to groups. (We still had teaching assistants.)&lt;/p&gt;
&lt;h3&gt;&lt;a href="#results" id="results"&gt;&lt;/a&gt;Results&lt;/h3&gt;
&lt;p&gt;At the end of the event we had a fantastic demo time. A great amount of learners showed their Quil creations, from an Santa Claus to stroboscopic rainbow animations. It was great to see how in the beginning everyone was shy to show their work but as more people did others felt encouraged to do the same.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#takeaways" id="takeaways"&gt;&lt;/a&gt;Takeaways&lt;/h3&gt;
&lt;p&gt;This was the first time we organized such workshop in Berlin. We were lucky to be a big team of organizers (six people) which allowed us to distribute the work.&lt;/p&gt;
&lt;p&gt;The feedback we got during and after the workshop has been very positive. About a third of the attendees have registered interest in joining project groups to keep learning. Obviously the more the better but even ten people is a nice outcome overall.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#thanks" id="thanks"&gt;&lt;/a&gt;Thanks&lt;/h3&gt;
&lt;p&gt;I'd like to take the opportunity to thank all of our coaches: Nils, Sean, Paulus, Jan, Johannes, Ben, Franziska, Luca, Txus, Kofi, Torsten, Tibor, Thomas, Stephan, Oskar, Kai &amp;amp; Matt thank you so much for being part of this. &lt;strong&gt;None of it would have happened without you!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also I'd like to thank my fellow organizers for pushing through the finish line together and for just being an overall awesome bunch. Thanks Bettina, Malwine, Arne, Jelle &amp;amp; Nicola.&lt;/p&gt;
&lt;p&gt;Last but not least I'd like to thank the companies that enabled ClojureBridge Berlin: Wunderlist, SoundCloud, GitHub, InnoQ, TicketSolve, Babbel &amp;amp; DaWanda. A special thank you in this regard to Andrei, who has done an exceptional job at hosting the event at Wunderlist!&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/clojurebridge-shirts.jpg" alt="ClojureBridge Berlin T-Shirts" /&gt;&lt;/p&gt;
&lt;p&gt;If you'd like to be informed about upcoming workshops, follow &lt;a href="https://twitter.com/clojureberlin"&gt;@ClojureBerlin&lt;/a&gt; on Twitter. If you don't have Twitter you can also &lt;a href="mailto:martinklepsch@googlemail.com"&gt;send me an email&lt;/a&gt; and I'll make sure you'll be notified :-)&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Image credits (in order):
 &lt;a href="https://twitter.com/bumbledebee"&gt;@bumbledebee&lt;/a&gt;,
 &lt;a href="https://twitter.com/codebeige/status/619804392284422144"&gt;@codebeige&lt;/a&gt;,
 &lt;a href="https://twitter.com/ClojureBerlin/status/619890238584963072"&gt;@malwine&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, July 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-07-24-clojurebridge-berlin.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:47b430b8-3e76-48c5-a68e-a12fe88b2e4e</id><title>Managing Local and Project-wide Development Parameters in Leiningen</title><link href="https://www.martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html" type="text/html" title="Managing Local and Project-wide Development Parameters in Leiningen" rel="alternate"></link><published>2015-06-03T00:00:00Z</published><updated>2015-06-03T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="Little tip. Long headline. In any project there are often settings that are specific to the context the project is run in (think of an environment parameter) and then there are parameters th..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html" rel="canonical"&gt;&lt;title&gt;Managing Local and Project-wide Development Parameters in Leiningen — Martin Klepsch&lt;/title&gt;&lt;meta content="Managing Local and Project-wide Development Parameters in Leiningen" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Little tip. Long headline. In any project there are often settings that are specific to the context the project is run in (think of an environment parameter) and then there are parameters th..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Managing Local and Project-wide Development Parameters in Leiningen" name="twitter:title"&gt;&lt;meta content="Little tip. Long headline. In any project there are often settings that are specific to the context the project is run in (think of an environment parameter) and then there are parameters th..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html" title="Permalink: Managing Local and Project-wide Development Parameters in Leiningen"&gt;June 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Managing Local and Project-wide Development Parameters in Leiningen&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;Little tip. Long headline.&lt;/p&gt;
&lt;p&gt;In any project there are often settings that are specific to the context the project is run in (think of an &lt;code&gt;environment&lt;/code&gt; parameter) and then there are parameters that are specifc to the developer/workstation they're run on. This is a guide to separate these two things nicely in Leiningen-based Clojure projects.&lt;/p&gt;
&lt;p&gt;So you have a project setup that uses &lt;a href="https://github.com/weavejester/environ"&gt;environ&lt;/a&gt; to determine the context the project is run in (&lt;code&gt;development&lt;/code&gt; vs. &lt;code&gt;production&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;; in project.clj:
(defproject your-app &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  ; ...
  :profiles {:dev {:env {:environment &amp;quot;development&amp;quot;}}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you also want to use environment variables (or anything else thats supported by environ) to store AWS credentials to access Amazon S3. You don't want to commit these credentials into version control, therefore you can't add them to &lt;code&gt;project.clj&lt;/code&gt;. The way to go is to create a file &lt;code&gt;profiles.clj&lt;/code&gt; in your project to store workstation specific information. Naively this could look something like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;{:dev {:env {:aws-access-key &amp;quot;abc&amp;quot;
             :aws-secret-key &amp;quot;xyz&amp;quot;
             :s3-bucket &amp;quot;mybucket&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run your project with this &lt;code&gt;profiles.clj&lt;/code&gt; you will be able to access your AWS credentials. You might also notice that &lt;code&gt;(environ/env :environment)&lt;/code&gt; is nil. &lt;strong&gt;That wasn't intended.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The problem here is that Leiningen will override keys in profiles defined in &lt;code&gt;project.clj&lt;/code&gt; if &lt;strong&gt;the same profile&lt;/strong&gt; has also been defined in &lt;code&gt;profiles.clj&lt;/code&gt;.  To recursively merge Leiningen profiles combine them like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;;; in project.clj:
(defproject your-app &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  ;; ...
  :profiles {:dev [:project/dev :local/dev]
             :project/dev {:env {:environment &amp;quot;development&amp;quot;}}})

;; in profiles.clj
{:local/dev {:env {:secret-key &amp;quot;xyz&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now both, &lt;code&gt;:envrionment&lt;/code&gt; and &lt;code&gt;:secret-key&lt;/code&gt; should be defined when you retrieve them using environ.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is largely inspired by James Reeves' &lt;a href="https://github.com/weavejester/duct"&gt;duct&lt;/a&gt; Leiningen template.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, June 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-06-03-managing-local-and-project-wide-development-parameters-in-leiningen.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:915cc2e8-d190-4d54-b746-0e1c34dff835</id><title>Formal Methods at Amazon</title><link href="https://www.martinklepsch.org/posts/formal-methods-at-amazon.html" type="text/html" title="Formal Methods at Amazon" rel="alternate"></link><published>2015-04-10T00:00:00Z</published><updated>2015-04-10T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/formal-methods-at-amazon.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="I saw this paper being mentioned again and again in my Twitter feed. Basically not even knowing what &amp;amp;quot;formal methods&amp;amp;quot; really means I was intrigued by the claim that it&amp;apos;s easy to re..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/formal-methods-at-amazon.html" rel="canonical"&gt;&lt;title&gt;Formal Methods at Amazon — Martin Klepsch&lt;/title&gt;&lt;meta content="Formal Methods at Amazon" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="I saw this paper being mentioned again and again in my Twitter feed. Basically not even knowing what &amp;amp;quot;formal methods&amp;amp;quot; really means I was intrigued by the claim that it&amp;apos;s easy to re..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/formal-methods-at-amazon.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/2.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Formal Methods at Amazon" name="twitter:title"&gt;&lt;meta content="I saw this paper being mentioned again and again in my Twitter feed. Basically not even knowing what &amp;amp;quot;formal methods&amp;amp;quot; really means I was intrigued by the claim that it&amp;apos;s easy to re..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/2.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/formal-methods-at-amazon.html" title="Permalink: Formal Methods at Amazon"&gt;April 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Formal Methods at Amazon&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;I saw this paper being mentioned again and again in my Twitter feed. Basically not even knowing what &amp;quot;formal methods&amp;quot; really means I was intrigued by the claim that it's easy to read. And it has been.&lt;/p&gt;
&lt;p&gt;The paper describes how Amazon used a specification language to describe designs of complex concurrent fault tolerant systems finding bugs and verifying changes in the process.&lt;/p&gt;
&lt;p&gt;The specification language (TLA+) is not focus of the paper, rather the authors concentrate on describing benefits, problems and the path of adopting formal specification of system designs in an engineering organization.&lt;/p&gt;
&lt;p&gt;TLA+, stands for &lt;em&gt;Temporal Logic of Actions&lt;/em&gt; and &lt;a href="http://research.microsoft.com/en-us/um/people/lamport/tla/tla-intro.html"&gt;&amp;quot;is especially well suited for writing high-level specifications of concurrent and distributed systems.&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reading how they use it at Amazon I'm under the impression that it works very similar to &lt;a href="http://blog.8thlight.com/connor-mendenhall/2013/10/31/check-your-work.html"&gt;generative testing&lt;/a&gt; dumping a ton of basically random (according to some rules) data into a system and checking if the desired properties are maintained. Often the term &lt;em&gt;&amp;quot;model checker&amp;quot;&lt;/em&gt; is used.&lt;/p&gt;
&lt;p&gt;Download the &lt;a href="http://research.microsoft.com/en-us/um/people/lamport/tla/amazon.html"&gt;original paper&lt;/a&gt; or a copy of it &lt;a href="/images/formal-methods-amazon.pdf"&gt;with some passages highlighted&lt;/a&gt; that I found particulary interesting.&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, April 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-04-10-formal-methods-at-amazon.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:92c021b4-d645-48fd-aeb5-333305edfdb5</id><title>(lisp keymap)</title><link href="https://www.martinklepsch.org/posts/lisp-keymap.html" type="text/html" title="(lisp keymap)" rel="alternate"></link><published>2015-02-05T00:00:00Z</published><updated>2015-02-05T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/lisp-keymap.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="A while back I wanted to setup hotkeys for the various apps I use. Mostly because I was annoyed by the cognitive effort you need to make to figure out how often you need to press Alt + Tab e..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/lisp-keymap.html" rel="canonical"&gt;&lt;title&gt;(lisp keymap) — Martin Klepsch&lt;/title&gt;&lt;meta content="(lisp keymap)" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="A while back I wanted to setup hotkeys for the various apps I use. Mostly because I was annoyed by the cognitive effort you need to make to figure out how often you need to press Alt + Tab e..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/lisp-keymap.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="(lisp keymap)" name="twitter:title"&gt;&lt;meta content="A while back I wanted to setup hotkeys for the various apps I use. Mostly because I was annoyed by the cognitive effort you need to make to figure out how often you need to press Alt + Tab e..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/lisp-keymap.html" title="Permalink: (lisp keymap)"&gt;February 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;(lisp keymap)&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;A while back I wanted to setup hotkeys for the various apps I use. Mostly because I was annoyed by the cognitive effort you need to make to figure out how often you need to press &lt;code&gt;Alt + Tab&lt;/code&gt; exactly to get to the app you want.&lt;/p&gt;
&lt;p&gt;It seemed like a good idea to use Capslock as a modifier key. This way I could be sure I wouldn't override any other keybindings. Figuring out how to do this I stumpled upon an excellent post by Steve Losh &lt;a href="http://stevelosh.com/blog/2012/10/a-modern-space-cadet/"&gt;&amp;quot;A Modern Space Cadet&amp;quot;&lt;/a&gt;. It's described in detail how to set Capslock to &lt;code&gt;Hyper&lt;/code&gt; - a fifth modifier key. I then created bindings like &lt;code&gt;Hyper + S&lt;/code&gt; which will focus Safari etc. Exactly what I was looking for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Then I found something in his post I wasn't looking for&lt;/strong&gt;: instructions to map my shift keys to parentheses. It sounded crazy at first but doing mostly LISP-y stuff these days I tried it anyways.&lt;/p&gt;
&lt;p&gt;Now I wouldn't want to live without it anymore. It's just so much easier than &lt;code&gt;Shift + {9,0}&lt;/code&gt;. Also the Shift keys still work as they do usually when pressed in combination with other keys.&lt;/p&gt;
&lt;p&gt;A few days ago I was typing some stuff at a collegues computer and it immediately felt cumbersome when having to type a parenthesis.&lt;/p&gt;
&lt;aside&gt; PS. Here are Steve Losh's original &lt;a
href="http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses"&gt;OS
X Instructions&lt;/a&gt;.  (What's KeyRemap4MacBook in this post is now &lt;a
href="https://pqrs.org/osx/karabiner/index.html.en"&gt;Karabiner&lt;/a&gt;.)
&lt;/aside&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, February 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-02-05-lisp-keymap.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:99353e70-0080-454a-825d-bb85f8398ae4</id><title>CLJSJS - Use Javascript Libraries in Clojurescript With Ease</title><link href="https://www.martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html" type="text/html" title="CLJSJS - Use Javascript Libraries in Clojurescript With Ease" rel="alternate"></link><published>2015-01-05T00:00:00Z</published><updated>2015-01-05T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="In Clojure, Java interoperability or “interop” is a core feature. In Clojurescript, interop with Javascript libraries does not work out-of-the-box across optimization modes. Extern files or ..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html" rel="canonical"&gt;&lt;title&gt;CLJSJS - Use Javascript Libraries in Clojurescript With Ease — Martin Klepsch&lt;/title&gt;&lt;meta content="CLJSJS - Use Javascript Libraries in Clojurescript With Ease" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="In Clojure, Java interoperability or “interop” is a core feature. In Clojurescript, interop with Javascript libraries does not work out-of-the-box across optimization modes. Extern files or ..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="CLJSJS - Use Javascript Libraries in Clojurescript With Ease" name="twitter:title"&gt;&lt;meta content="In Clojure, Java interoperability or “interop” is a core feature. In Clojurescript, interop with Javascript libraries does not work out-of-the-box across optimization modes. Extern files or ..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/cljsjs-use-javascript-libraries-in-clojurescript.html" title="Permalink: CLJSJS - Use Javascript Libraries in Clojurescript With Ease"&gt;January 2015&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;CLJSJS - Use Javascript Libraries in Clojurescript With Ease&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;In Clojure, Java interoperability or “interop” is a core feature. In Clojurescript, interop with Javascript libraries does not work out-of-the-box across optimization modes. Extern files or “externs” required for advanced optimizations are often hard to find.&lt;/p&gt;
&lt;p&gt;To fix this a few newly found friends and I created &lt;strong&gt;&lt;a href="http://cljsjs.github.io"&gt;CLJSJS&lt;/a&gt;&lt;/strong&gt;. CLJSJS is an effort to package Javascript libraries with their respective extern files and provide tools to integrate them into your project.&lt;/p&gt;
&lt;p&gt;My personal hope is that this will make it easier for newcomers to get started with Clojurescript.&lt;/p&gt;
&lt;p&gt;Also existing solutions like &lt;code&gt;deps.clj&lt;/code&gt; (&lt;a href="https://groups.google.com/forum/#!msg/clojurescript/LtFMDxc5D00/hMR6BcfMMAMJ"&gt;more here&lt;/a&gt;) only address the problem of Javascript dependencies partially. Maybe CLJSJS can serve as a vehicle to find some &amp;quot;pseudo-standard&amp;quot; for this kind of stuff.&lt;/p&gt;
&lt;p&gt;Thanks to Juho Teperi, Micha Niskin &amp;amp; Alan Dipert for their contributions and ideas so far. &lt;strong&gt;Now go and check out the &lt;a href="http://cljsjs.github.io"&gt;project homepage&lt;/a&gt; or jump straight into the &lt;a href="https://github.com/cljsjs/packages"&gt;packages repo&lt;/a&gt; and learn how you can contribute.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Announcement post and discussion on the &lt;a href="https://groups.google.com/forum/#!topic/clojurescript/qhFNVEeNCbc"&gt;Clojurescript mailinglist&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, January 2015 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2015-01-05-cljsjs-use-javascript-libraries-in-clojurescript.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:ae776455-1de4-4ac8-bdda-d84680ed4b6b</id><title>Why Boot is Relevant For The Clojure Ecosystem</title><link href="https://www.martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html" type="text/html" title="Why Boot is Relevant For The Clojure Ecosystem" rel="alternate"></link><published>2014-11-06T00:00:00Z</published><updated>2014-11-06T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="Boot is a build system for Clojure projects. It roughly competes in the same area as Leiningen but Boot&amp;apos;s new version brings some interesting features to the table that make it an alternativ..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html" rel="canonical"&gt;&lt;title&gt;Why Boot is Relevant For The Clojure Ecosystem — Martin Klepsch&lt;/title&gt;&lt;meta content="Why Boot is Relevant For The Clojure Ecosystem" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Boot is a build system for Clojure projects. It roughly competes in the same area as Leiningen but Boot&amp;apos;s new version brings some interesting features to the table that make it an alternativ..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="Why Boot is Relevant For The Clojure Ecosystem" name="twitter:title"&gt;&lt;meta content="Boot is a build system for Clojure projects. It roughly competes in the same area as Leiningen but Boot&amp;apos;s new version brings some interesting features to the table that make it an alternativ..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/1.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html" title="Permalink: Why Boot is Relevant For The Clojure Ecosystem"&gt;November 2014&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;Why Boot is Relevant For The Clojure Ecosystem&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;Boot is a build system for Clojure projects. It roughly competes in the same area as Leiningen but Boot's new version brings some interesting features to the table that make it an alternative worth assessing.&lt;/p&gt;
&lt;aside&gt;
If you don't know what Boot is I recommend reading this post by one of Boot's authors first:
&lt;a href="http://adzerk.com/blog/2014/11/clojurescript-builds-rebooted/"&gt;Clojurescript Builds, Rebooted&lt;/a&gt;.
&lt;/aside&gt;
&lt;h2&gt;&lt;a href="#compose-build-steps" id="compose-build-steps"&gt;&lt;/a&gt;Compose Build Steps&lt;/h2&gt;
&lt;p&gt;If you've used Leiningen for more than packaging jars and uberjars you likely came across plugins like &lt;code&gt;lein-cljsbuild&lt;/code&gt; or &lt;code&gt;lein-garden&lt;/code&gt;, both compile your stuff into a target format (i.e. JS, CSS). Now if you want to run both of these tasks at the same time — which you probably want during development — you have two options: either you open two terminals and start them separately or you fall back to something like below that you run in a &lt;code&gt;dev&lt;/code&gt; profile (this is how it's done in &lt;a href="https://github.com/plexus/chestnut"&gt;Chestnut&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;(defn start-garden []
(future
  (print &amp;quot;Starting Garden.\n&amp;quot;)
  (lein/-main [&amp;quot;garden&amp;quot; &amp;quot;auto&amp;quot;])))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there are issues with both of these options in my opinion. Opening two terminals to initiate your development environment is just not very user friendly and putting code related to building the project into your codebase is boilerplate that unnecessarily can cause trouble by getting outdated.&lt;/p&gt;
&lt;p&gt;What Boot allows developers to do is to write small composable tasks. These work somewhat similar to stateful transducers and ring middleware in that you can just combine them with regular function composition.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#a-quick-example" id="a-quick-example"&gt;&lt;/a&gt;A Quick Example&lt;/h3&gt;
&lt;p&gt;Playing around with Boot, I tried to write a task. To test this task in an actual project I needed to install it into my local repository (in Leiningen: &lt;code&gt;lein install&lt;/code&gt;).  Knowing that I'd need to reinstall the task constantly as I change it I was looking for something like Leiningen's Checkouts so I don't have to re-install after every change.&lt;/p&gt;
&lt;p&gt;Turns out Boot can solve this problem in a very different way that illustrates the composing mechanism nicely. Boot defines a bunch of &lt;a href="https://github.com/boot-clj/boot/blob/master/boot/core/src/boot/task/built_in.clj"&gt;built-in tasks&lt;/a&gt; that help with packaging and installing a jar: &lt;code&gt;pom&lt;/code&gt;, &lt;code&gt;add-src&lt;/code&gt;, &lt;code&gt;jar&lt;/code&gt; &amp;amp; &lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We could call all of these these on the command line as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boot pom add-src jar install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we're lazy we'll define it as a task in our project's &lt;code&gt;build.boot&lt;/code&gt; file. (Command-line task and their arguments are symmetric to their Clojure counterparts.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-clojure"&gt;(require '[boot.core          :refer [deftask]]
            '[boot.task.built-in :refer [pom add-src jar install]])

(deftask build-jar
  &amp;quot;Build jar and install to local repo.&amp;quot;
  []
  (comp (pom) (add-src) (jar) (install)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;boot build-jar&lt;/code&gt; is roughly equivalent to &lt;code&gt;lein install&lt;/code&gt;. To have any changes directly reflected on our classpath we can just compose our newly written &lt;code&gt;build-jar&lt;/code&gt; task with another task from the repertoire of built-in tasks: &lt;code&gt;watch&lt;/code&gt;. The &lt;code&gt;watch&lt;/code&gt;-task observes the file system for changes and initiates a new build cycle when they occur:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boot watch build-jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that command we just composed our already composed task with another task. &lt;strong&gt;Look at that cohesion!&lt;/strong&gt;&lt;/p&gt;
&lt;aside&gt;I'm not familiar enough with Leiningen Checkouts to say with
confidence if this is identical behavior but for the majority of cases it'll
probably work.&lt;/aside&gt;
&lt;h2&gt;&lt;a href="#there-are-side-effects-everwhere" id="there-are-side-effects-everwhere"&gt;&lt;/a&gt;There Are Side-Effects Everwhere!&lt;/h2&gt;
&lt;p&gt;Is one concern that has been raised about Boot. Leiningen is beautifully declarative. It's one immutable map that describes your whole project. Boot on the other hand looks a bit different.  A usual boot file might contain a bunch of side-effectful functions and in general it's much more a program than it is data.&lt;/p&gt;
&lt;p&gt;I understand that this might seem like a step back at first sight, in fact I looked at it with confusion as well. There are some problems with Leiningen though that are probably hard to work out in Leiningen's declarative manner (think back to &lt;a href="https://github.com/technomancy/leiningen/issues/1752"&gt;running multiple &lt;code&gt;lein X auto&lt;/code&gt; commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking at Boot's code it becomes apparent that the authors spent a great deal of time on isolating the side effects that might occur in various build steps. I recommend reading the &lt;a href="https://news.ycombinator.com/item?id=8553189"&gt;comments on this Hacker News thread&lt;/a&gt; for more information on that.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#when-to-use-boot-when-to-use-leiningen" id="when-to-use-boot-when-to-use-leiningen"&gt;&lt;/a&gt;When To Use Boot, When To Use Leiningen&lt;/h2&gt;
&lt;p&gt;Boot is a build tool. That said it's task composition features only get to shine when multiple build steps are involved. If you're developing a library I'm really not going to try to convince you to switch to Boot.  Leiningen works great for that and is, I'd assume, more stable than Boot.&lt;/p&gt;
&lt;p&gt;If you however develop an application that requires various build steps (like Clojurescript, Garden, live reloading, browser-repl) you should totally check out Boot. There are tasks for all of the above mentioned: &lt;a href="https://github.com/adzerk/boot-cljs"&gt;Clojurescript&lt;/a&gt;, &lt;a href="https://github.com/adzerk/boot-cljs-repl"&gt;Clojurescript REPL&lt;/a&gt;, &lt;a href="https://github.com/martinklepsch/boot-garden"&gt;Garden&lt;/a&gt;, &lt;a href="https://github.com/adzerk/boot-reload"&gt;live reloading&lt;/a&gt;. I wrote the Garden task and writing tasks is not hard once you have a basic understanding of Boot.&lt;/p&gt;
&lt;p&gt;If you need help or have questions join the &lt;a href="http://webchat.freenode.net/?channels=hoplon"&gt;#hoplon channel on freenode IRC&lt;/a&gt;. I'll try to help and if I can't Alan or Micha, the authors of Boot, probably can.&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, November 2014 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2014-11-06-why-boot-is-relevant-for-the-clojure-ecosystem.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:8b07ff10-d213-41b5-b388-5cc9dbc17bfd</id><title>S3-Beam — Direct Upload to S3 with Clojure &amp; Clojurescript</title><link href="https://www.martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html" type="text/html" title="S3-Beam — Direct Upload to S3 with Clojure &amp; Clojurescript" rel="alternate"></link><published>2014-10-21T00:00:00Z</published><updated>2014-10-21T00:00:00Z</updated><content type="html" xml:base="https://www.martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html">&lt;!DOCTYPE html&gt;
&lt;html itemtype="http://schema.org/Blog" lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Martin Klepsch (martinklepsch@googlemail.com)" itemprop="author" name="author"&gt;&lt;meta content="blog, clojure, development, clojurescript, heroku, amazon s3, aws" itemprop="keywords" name="keywords"&gt;&lt;meta content="In a previous post I described how to upload files from the browser directly to S3 using Clojure and Clojurescript. I now packaged this up into a small (tiny, actually) library: s3-beam. An ..." itemprop="description" name="description"&gt;&lt;link href="https://martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html" rel="canonical"&gt;&lt;title&gt;S3-Beam — Direct Upload to S3 with Clojure &amp; Clojurescript — Martin Klepsch&lt;/title&gt;&lt;meta content="S3-Beam — Direct Upload to S3 with Clojure &amp;amp; Clojurescript" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="In a previous post I described how to upload files from the browser directly to S3 using Clojure and Clojurescript. I now packaged this up into a small (tiny, actually) library: s3-beam. An ..." property="og:description"&gt;&lt;meta content="https://martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html" property="og:url"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" property="og:image"&gt;&lt;meta content="martinklepsch.org" property="og:site_name"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@martinklepsch" name="twitter:site"&gt;&lt;meta content="@martinklepsch" name="twitter:creator"&gt;&lt;meta content="S3-Beam — Direct Upload to S3 with Clojure &amp;amp; Clojurescript" name="twitter:title"&gt;&lt;meta content="In a previous post I described how to upload files from the browser directly to S3 using Clojure and Clojurescript. I now packaged this up into a small (tiny, actually) library: s3-beam. An ..." name="twitter:description"&gt;&lt;meta content="https://martinklepsch.org/images/selfies/3.jpg" name="twitter:image"&gt;&lt;link href="/images/favicon.ico" rel="shortcut icon"&gt;&lt;link href="/atom.xml" rel="alternate" title="Sitewide Atom Feed" type="application/atom+xml"&gt;&lt;link href="/stylesheets/martinklepschorg-v3.css" rel="stylesheet" type="text/css"&gt;&lt;script type="text/javascript"&gt;var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3138561-8']);
    _gaq.push(['_setDomainName', 'martinklepsch.org']);
    _gaq.push(['_trackPageview']);

    setTimeout("_gaq.push(['_trackEvent', '15_seconds', 'read'])", 15000);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript';
    ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl'
    : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
    })();&lt;/script&gt;&lt;/head&gt;&lt;body class="system-sans-serif dark-gray"&gt;&lt;div class="mh3"&gt;&lt;div class="mw7 center mb6"&gt;&lt;article class="mt5" itemprop="blogPost" itemscope="" itemtype="http://schema.org/BlogPosting"&gt;&lt;div class="f6 db normal mw6 center"&gt;&lt;a class="link" href="/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html" title="Permalink: S3-Beam — Direct Upload to S3 with Clojure &amp;amp; Clojurescript"&gt;October 2014&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="/" title="Home"&gt;Home&lt;/a&gt;&lt;span class="ph2"&gt;/&lt;/span&gt;&lt;a class="link" href="https://twitter.com/martinklepsch" title="@martinklepsch on Twitter"&gt;@martinklepsch&lt;/a&gt;&lt;/div&gt;&lt;h1 class="f1-ns f2 fw1 w-80-ns lh-title mw6 center"&gt;S3-Beam — Direct Upload to S3 with Clojure &amp; Clojurescript&lt;/h1&gt;&lt;section class="mkdwn lh-copy"&gt;&lt;p&gt;In a &lt;a href="http://www.martinklepsch.org/posts/using-coreasync-and-transducers-for-direct-s3-upload.html"&gt;previous post&lt;/a&gt; I described how to upload files from the browser directly to S3 using Clojure and Clojurescript. I now packaged this up into a small (tiny, actually) library: &lt;a href="https://github.com/martinklepsch/s3-beam"&gt;s3-beam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An interesting note on what changed to the process described in the earlier post: the code now uses &lt;code&gt;pipeline-async&lt;/code&gt; instead of transducers. After some discussion with Timothy Baldridge this seemed more appropriate even though there are some aspects about the transducer approach that I liked but didn't get to explore further.&lt;/p&gt;
&lt;p&gt;Maybe in an upcoming version it will make sense to reevaluate that decision. If you have any questions, feedback or suggestions I'm happy to hear them!&lt;/p&gt;
&lt;/section&gt;&lt;div class="mv4 em-before mw6 center"&gt;&lt;a class="link" href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;, October 2014 &lt;a class="white" href="https://prose.io/#martinklepsch/martinklepsch.org/edit/master/content/posts/2014-10-21-s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.markdown" target="_blank"&gt;edit on prose.io&lt;/a&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry></feed>