<?xml version="1.0" encoding="UTF-8"?><feed xmlns:a="http://www.w3.org/2005/Atom"><title>Martin Klepsch</title><subtitle>Martin Klepsch's blog</subtitle><generator>a bespoke mix of babashka and bootleg</generator><link href="https://www.martinklepsch.org" type="text/html"/><updated>2021-05-09T22:09:30.03Z</updated><id>https://www.martinklepsch.org</id><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author><entry><id>urn:uuid:a9a77281-eb62-472c-a08b-1e9935c8a9c2</id><title>Homoiconicity &amp; Feature Flags</title><published>2021-05-09T22:09:30.03Z</published><updated>2021-05-09T22:09:30.03Z</updated><link href="https://www.martinklepsch.org/posts/homoiconicity-and-feature-flags.html" type="text/html" title="Homoiconicity &amp; Feature Flags" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/homoiconicity-and-feature-flags.html">&lt;h1&gt;Homoiconicity &amp; Feature Flags&lt;/h1&gt;&lt;p&gt;At work we've been using feature flags to roll out various changes of the product. Most recently the rebrand from Icebreaker to &lt;a href="https://gatheround.com"&gt;Gatheround&lt;/a&gt;. This allowed us to continuously ship small pieces and review and improve these on their own pace without creating two vastly different branches of changes.&lt;/p&gt;&lt;p&gt;With the rebrand work in particular there were lots of places where we needed relatively small, local differentiations between the old and the new appearance. Oftentimes just applying a different set of classes to a DOM element. Less often, up to swapping entire components.&lt;/p&gt;&lt;p&gt;Overall this approach seemed to work really well and we shipped the rebrand without significant delays and at a level of quality that made everyone happy. What we're left with now is some 250+ conditionals involving our &lt;code&gt;use-new-brand?&lt;/code&gt; feature flag.&lt;/p&gt;&lt;p&gt;&lt;em&gt;This tells the story of how we got rid of those.&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Introducing Homoiconicity&lt;/h2&gt;&lt;p&gt;If you're well familiar with homoiconicity this may not be entirely new but for those who aren't: homoiconicity is the fancy word for when you can read your program as data. Among many other lisp/scheme languages Clojure is homoiconic:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(doseq [n (range 10)]
  (println n))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The program above can be run but it can also be read as multiple nested lists:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;[doseq     [n [range 10]]    [println n]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if you know what I'm talking about you will see that I skipped over a small detail here, namely that the code above uses two types of parenthesis and that information got lost in this simplified array representation.&lt;/p&gt;&lt;p&gt;When doing it right we would end up with exactly the same representation as in the first code sample. And that is homoiconicity.&lt;/p&gt;&lt;h2&gt;Homoiconicity &amp;amp; Feature Flags&lt;/h2&gt;&lt;p&gt;With this basic understanding of homoiconicity, lets take a look at what those feature flags looked like in practice:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;[:div
 {:class (if (config/use-new-brand?)
           &amp;quot;bg-new-brand typo-body&amp;quot;
           &amp;quot;bg-old-brand typo-large&amp;quot;)}]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(when (config/use-new-brand?)
  (icon/Icon {:name &amp;quot;conversation-color&amp;quot;
              :class &amp;quot;prxxs h3&amp;quot;}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And so on. Now we have 250+ of those in our codebase but don't really plan on reversing that change any time soon... so we got to get rid of them. Fortunately Clojure is homoiconic and doing this is possible in a fashion that really tickles my brain in a nice way. &lt;/p&gt;&lt;h2&gt;Code Rewriting&lt;/h2&gt;&lt;p&gt;... isn't new of course, CircleCI famously &lt;a href="https://circleci.com/blog/rewriting-your-test-suite-in-clojure-in-24-hours/"&gt;rewrote 14.000 lines of test code to use a new testing framework&lt;/a&gt;. I'm sure many others have done similar stuff and this general idea also isn't limited to Clojure. Code rewriting tools exist in many language ecosystems. &lt;strong&gt;But how easily you can do it in Clojure felt very empowering.&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;The next two sections will be about some 30 lines of code got us there about 90% of the way.&lt;/p&gt;&lt;h2&gt;Babashka + rewrite-clj&lt;/h2&gt;&lt;p&gt;&lt;a href="https://babashka.org/"&gt;Babashka&lt;/a&gt; is a &amp;quot;fast, native Clojure scripting runtime&amp;quot;. With Babashka you can work with the filesystem with shell-like abstractions, make http requests and much more. You can't use every Clojure library from Babashka but many useful ones are included right out of the box. &lt;/p&gt;&lt;p&gt;One of the libraries that is included is &lt;a href="https://github.com/clj-commons/rewrite-clj"&gt;rewrite-clj&lt;/a&gt;. And, you guessed it, rewrite-clj helps you ü•Å ... rewrite Clojure/Script code. &lt;/p&gt;&lt;p&gt;I hadn't used rewrite-clj before much am still a bit unfamiliar with it's API but after asking some questions on Slack &lt;a href="https://twitter.com/borkdude"&gt;@borkdude&lt;/a&gt; (who also created Babashka) helped me out with an example of transforming conditionals that I then adapted for my specific situation.&lt;/p&gt;&lt;p&gt;I will not go into the code in detail here but if you're interested, I recorded &lt;a href="https://www.loom.com/share/70c1d3c45d9f45e9833344b5bd076813"&gt;a short 4 minute video explaining it at a surface level and demonstrating my workflow&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The rewriting logic showed in the video ignores many edge cases and isn't an attempt at an holistic tool to remove dead code branches but in our case this basic tool removed about 95% of the feature flag usages, leaving a mere 12 cases behind that used things like &lt;code&gt;cond-&amp;gt;&lt;/code&gt; or conjunctions.&lt;/p&gt;&lt;p&gt;Of the more than 230 feature flags that have been removed only about ten needed additional adjustments for indentation. This happened mostly when a feature-flag-using conditional wrapped multiple lines of code. Due to the locality of our changes that (fortunately) was relatively uncommon. If we had set up an automatic formatter for our code this also wouldn't have required any extra work.&lt;/p&gt;&lt;h2&gt;Onward&lt;/h2&gt;&lt;p&gt;This has been an extremely satisfying project, if you can even call those 30 lines a &amp;quot;project&amp;quot;. I hope you also learned something or found it helpful in other ways!&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href="https://github.com/sponsors/borkdude"&gt;Michiel &amp;quot;borkdude&amp;quot; Borkent&lt;/a&gt; for all his work on Babashka. The interactive development workflow shown in &lt;a href="https://www.loom.com/share/70c1d3c45d9f45e9833344b5bd076813"&gt;the video&lt;/a&gt; paired with blazing startup times and a rich ecosystem makes it feel like there is a lot of potential still to be uncovered.&lt;/p&gt;&lt;p&gt;I'd also like to thank &lt;a href="https://github.com/lread"&gt;Lee Read&lt;/a&gt;, who has done such an amazing job making rewrite-clj ready for more platforms like ClojureScript and Babashka as well as making sure it's future-proof by adding more tests and fixing many long standing bugs.&lt;/p&gt;&lt;p&gt;If you thought this was interesting, consider &lt;a href="https://twitter.com/martinklepsch"&gt;following me on Twitter&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:542795e9-4a9c-4542-b57d-0bbe4e3e332c</id><title>Localizing a Ghost Theme</title><published>2021-05-04T16:25:56.00Z</published><updated>2021-05-04T16:25:56.00Z</updated><link href="https://www.martinklepsch.org/posts/localizing-a-ghost-theme.html" type="text/html" title="Localizing a Ghost Theme" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/localizing-a-ghost-theme.html">&lt;h1&gt;Localizing a Ghost Theme&lt;/h1&gt;&lt;p&gt;Lately I've spent some time setting up a blog for a friend. &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; is where it's at these days when it comes to blogging ‚Äî unless you're a nerd like me who loves to mess around with static site generators every now and then. üòÖ&lt;/p&gt;&lt;p&gt;Ghost provides many beautiful themes out of the box but most of them don't seem to support localization, which would be a nice thing to have for my friends blog. So I did some digging and essentially it comes down to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Using the &lt;code&gt;{{t}}&lt;/code&gt; helper for any strings that should be localized (&lt;a href="https://ghost.org/docs/themes/helpers/translate/"&gt;docs&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Providing a &lt;code&gt;locales/de.json&lt;/code&gt; file with mappings to localized strings&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The &lt;a href="https://github.com/TryGhost/Dawn"&gt;Dawn theme&lt;/a&gt; that we were using was pretty light on strings that needed localization so with a little bit of &lt;a href="https://github.com/machakann/vim-sandwich"&gt;vim-sandwich&lt;/a&gt; magic and a custom mapping I was able to update it to use the &lt;code&gt;{{t}}&lt;/code&gt; helper in maybe half an hour.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;xmap &amp;lt;Leader&amp;gt;t sai{{t &amp;quot;&amp;lt;CR&amp;gt;&amp;quot;}}&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the visual mapping above all I needed to do is select the text that I want to localize and hit &lt;code&gt;&amp;lt;space&amp;gt;t&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="selecting some text and using vim-sandwich to wrap it in {{t}}" src="/images/uploads/sandwich-magic.gif" title="vim sandwich wrapping with custom head/tail"&gt;&lt;/p&gt;&lt;p&gt;Now the last step was to create the initial &lt;code&gt;locales/en.json&lt;/code&gt; file. Later on I will use the English one as a template to create a German localization.&lt;/p&gt;&lt;p&gt;Since typing out the &lt;em&gt;more than a dozen&lt;/em&gt; strings manually would have been boring I instead wrote a &lt;a href="https://babashka.org/"&gt;babashka&lt;/a&gt; script to generate the English locales file for me.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#!/usr/bin/env bb
(require '[clojure.java.io :as io]
         '[cheshire.core :as json]
         '[babashka.fs :as fs])

(def entries
  (-&amp;gt;&amp;gt; (fs/glob &amp;quot;.&amp;quot; &amp;quot;**/*.hbs&amp;quot;)
       (map (fn [p] (slurp (io/file (str p)))))
       (mapcat (fn [file-contents]
                 (map second (re-seq #&amp;quot;\{\{t \&amp;quot;(.*)\&amp;quot;\}\}&amp;quot; file-contents))))
       (set)
       (map (fn [s] [s s]))
       (into {})))

(println (json/generate-string entries {:pretty true}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This script essentially finds all usages of the &lt;code&gt;{{t}}&lt;/code&gt; helper and spits out a JSON object where the keys are identical to the values (i.e. if the theme was English, that would be the &lt;code&gt;locales/en.json&lt;/code&gt; file).&lt;/p&gt;&lt;p&gt;Babashka makes figuring this stuff out such a breeze because I can just incrementally build this out in a connected babashka nREPL session instead of changing the file and running the script as a whole on every change. REPLs for the win! &lt;/p&gt;&lt;p&gt;In the end I created &lt;a href="https://github.com/TryGhost/Dawn/pull/38"&gt;this little PR to the theme&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:b2865f91-de5b-41f5-9632-6a3055b8e93d</id><title>Clojure Macros: Creating vars from a map</title><published>2021-02-25T12:18:42.59Z</published><updated>2021-02-25T12:18:42.59Z</updated><link href="https://www.martinklepsch.org/posts/clojure-macro-magic-vars-from-map.html" type="text/html" title="Clojure Macros: Creating vars from a map" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/clojure-macro-magic-vars-from-map.html">&lt;h1&gt;Clojure Macros: Creating vars from a map&lt;/h1&gt;&lt;p&gt;The other day I was looking for a way to turn a map into a bunch of vars. I know a macro is what will get the job done but I write macros so rarely that it always takes me a while to figure it out. In the end I ended up with something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defmacro def-all [m]
  (-&amp;gt;&amp;gt; (for [[n v] m]
         `(def ~(symbol n) ~v))
       (into [])))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using¬†&lt;code&gt;macroexpand&lt;/code&gt;¬†you can see that this translates to the a bunch of¬†&lt;code&gt;def&lt;/code&gt;¬†calls in a vector:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;user=&amp;gt; (macroexpand '(def-all {:a 1 :b 2}))
[(def a 1) (def b 2)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Like myself, you may wonder why the vector is needed. The issue is that¬†&lt;code&gt;for&lt;/code&gt;¬†will return a list and that would result in the macro emitting the following Clojure code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;((def a 1) (def b 2))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After evaluating the two inner¬†&lt;code&gt;def&lt;/code&gt;¬†forms, this will result in another function call where the return value of the first¬†&lt;code&gt;def&lt;/code&gt;¬†is used as a function. Depending on what you are defining this may fail or lead to unexpected behavior.&lt;/p&gt;&lt;p&gt;After sharing my solution using¬†&lt;code&gt;(into [])&lt;/code&gt;¬†in the¬†&lt;a href="https://clojurians.net/"&gt;Clojurians Slack&lt;/a&gt;¬†I was made aware that instead if turning the thing into a vector you can also just prepend a do into that list, resulting in code that feels slightly more aligned with my intention:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defmacro def-all [m]
  (-&amp;gt;&amp;gt; (for [[n v] m]
         `(def ~(symbol n) ~v))
       (cons 'do)))

(macroexpand '(def-all {:a 1 :b 2}))
; returns
(do (def a 1) (def b 2))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I realize this is a super basic macro but I can totally see how that might be useful to people starting to write their own macros. If you're looking for a more full-fledged guide,¬†&lt;a href="https://www.braveclojure.com/writing-macros/"&gt;Clojure for the Brave and True&lt;/a&gt;¬†got you covered.&lt;/p&gt;&lt;p&gt;Thanks to Justin Smith for sharing his experience on Slack with me so many times.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:7e85ecb2-3033-493b-81f5-8b27cef7574c</id><title>Promises in a ClojureScript REPL</title><published>2020-05-24T11:09:30.03Z</published><updated>2020-05-24T11:09:30.03Z</updated><link href="https://www.martinklepsch.org/posts/working-with-promises-in-clojurescript-repls.html" type="text/html" title="Promises in a ClojureScript REPL" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/working-with-promises-in-clojurescript-repls.html">&lt;h1&gt;Promises in a ClojureScript REPL&lt;/h1&gt;&lt;p&gt;&lt;a href="https://twitter.com/roman01la"&gt;Roman&lt;/a&gt; wrote a nice post on working inside ClojureScript REPLs, also touching on &lt;a href="https://gist.github.com/roman01la/b939e4f2341fc2f931e34a941aba4e15#repl‚Äìasynchrony"&gt;how to deal with promises&lt;/a&gt;. If you're unfamiliar, the problem is that in Javascript many operations return promises and unlike in Clojure you cannot block until the promise is resolved. Instead you &lt;i&gt;have to&lt;/i&gt; handle the resulting value asynchronously. So if you for instance use &lt;code&gt;fetch&lt;/code&gt; that could look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(.then (js/fetch &amp;quot;https://jsonip.com/&amp;quot;) prn)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will use &lt;code&gt;prn&lt;/code&gt; to print the value of the resolved promise. Sometimes you don't just want to print things though, the real power of a REPL lies in reusing values and successively building up just the shape of data you need.&lt;/p&gt;&lt;p&gt;One nice trick I learned from Sean Grove years ago is that you can just use &lt;code&gt;def&lt;/code&gt;. This isn't something you'd do in production code but it's zero-ceremony and very handy to capture values.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(.then (js/fetch &amp;quot;https://jsonip.com/&amp;quot;) #(def -r %))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After this you can evaluate the &lt;code&gt;-r&lt;/code&gt; symbol in your REPL and it will give you the value of the &lt;code&gt;fetch&lt;/code&gt; promise. Alternatively to &lt;code&gt;def&lt;/code&gt; we could also use an &lt;code&gt;atom&lt;/code&gt; to store the return value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(def s (atom nil))
(.then (js/fetch &amp;quot;https://jsonip.com/&amp;quot;) #(reset! s %))&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Ergonomics&lt;/h3&gt;&lt;p&gt;Now that we know how we can access the resulting value of a promise, let's make it convenient. For convenience I basically want two things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Make it easy to wrap any promise-returning form to capture it's return value&lt;/li&gt;&lt;li&gt;Make it easy to access the return values of multiple promises&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What I came up with is a function I just named &lt;code&gt;t&lt;/code&gt; which can be used like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(let [s (atom {})]
  (defn t
    ([kw] (get @s kw))
    ([p kw] (.then p (fn [r] (swap! s assoc kw r) r)))))
    
(-&amp;gt; (js/fetch &amp;quot;https://jsonip.com/&amp;quot;)
    (t :jsonip))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When &lt;code&gt;t&lt;/code&gt; receives two arguments it will consider the first argument a promise storing the resulting value in an atom under the key provided as the second argument, &lt;code&gt;:jsonip&lt;/code&gt; in this case. &lt;/p&gt;&lt;p&gt;This API is particularly nice when you consider that most editor integrations provide the ability to evaluate the form around your cursor. If I place my cursor within &lt;code&gt;(t :jsonip)&lt;/code&gt; and evaluate this form I can look at the value the promise returned without changing any of the code. I can also just continue chaining with &lt;code&gt;then&lt;/code&gt; since &lt;code&gt;t&lt;/code&gt; returns the original promise. &lt;/p&gt;&lt;p&gt;Another nice feature is that I can reuse the values for future REPL evaluations by referring to them using forms like &lt;code&gt;(t :jsonip)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Obviously &lt;strong&gt;this is just one way&lt;/strong&gt; but I liked how that simple 4 line function made working with promises in a REPL a lot more enjoyable.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:8fb953cf-e43f-4482-9fb2-f5e641a59cdf</id><title>Improved Support for Foreign Libs in cljdoc</title><published>2020-05-16T11:16:36.82Z</published><updated>2020-05-16T11:16:36.82Z</updated><link href="https://www.martinklepsch.org/posts/cljdoc-supports-foreign-libs.html" type="text/html" title="Improved Support for Foreign Libs in cljdoc" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/cljdoc-supports-foreign-libs.html">&lt;h1&gt;Improved Support for Foreign Libs in cljdoc&lt;/h1&gt;&lt;p&gt;Foreign libraries of ClojureScript libraries have always been a bit of an issue in cljdoc. With a namespace like the one below cljdoc would try to require &lt;code&gt;&amp;quot;react&amp;quot;&lt;/code&gt; and then fail because &lt;code&gt;&amp;quot;react&amp;quot;&lt;/code&gt; isn't a namespace it could find on the classpath. &lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(ns foo.bar
  (:require [&amp;quot;react&amp;quot; :as react]))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;No more! After some recent work by &lt;a href="https://github.com/frozar"&gt;Fabien Rozar&lt;/a&gt; the analyzer will now walk all files packaged with a library for &lt;code&gt;:require&lt;/code&gt; forms like the one above and stub them out so that the ClojureScript analyzer thinks they exist.&lt;/p&gt;&lt;p&gt;In the end the &lt;a href="https://github.com/cljdoc/cljdoc-analyzer/pull/20/files"&gt;implementation&lt;/a&gt; was less complex than I thought it would be. Which I guess is a testament to the thoughtfulness of the people contributing to the ClojureScript compiler.&lt;/p&gt;&lt;h3&gt;cljdoc-analyzer&lt;/h3&gt;&lt;p&gt;All of this work builds on some long standing work by &lt;a href="https://github.com/lread"&gt;Lee Read&lt;/a&gt; to provide a standalone analyzer to extract API information from Clojure &amp;amp; ClojureScript libraries. In many ways this is similar to the fantastic clj-kondo, except that it's focused more on full support of Clojure rather than speed. The analyzer cljdoc uses will actually load all your code so that even programatically created vars (often via macros) are returned properly.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/cljdoc/cljdoc-analyzer"&gt;cljdoc-analyzer&lt;/a&gt; itself is a continuation of the work started by &lt;a href="https://github.com/weavejester/codox"&gt;codox&lt;/a&gt; with some added bells and whistles, like more consistent output between Clojure and ClojureScript analysis results and automatic classpath construction based on a library's dependencies. The goal is that you can just run it on any library and get some API information (as EDN) in return. &lt;/p&gt;&lt;p&gt;Thanks to Fabien and Lee for their work that made this all possible. I continue to be amazed by the people that come around to contribute to cljdoc. Fabien is from France, Lee is from Canada and unbeknownst to each other they basically shipped this together. Thank you!&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:731b58c0-836e-4448-b225-67123f69d9af</id><title>Static Blogging, Some Lessons Learned</title><published>2020-05-10T12:13:00.30Z</published><updated>2020-05-10T12:13:00.30Z</updated><link href="https://www.martinklepsch.org/posts/static-blogging-lessons-learned.html" type="text/html" title="Static Blogging, Some Lessons Learned" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/static-blogging-lessons-learned.html">&lt;h1&gt;Static Blogging, Some Lessons Learned&lt;/h1&gt;&lt;p&gt;I've been running this blog for more than eight years now. Over these years it went through multiple rewrites, occasionally satisfying my urge to play with new toys. Now I'm in the middle of the next rewrite and I'm realizing some things that I'd love to have done from the start.&lt;/p&gt;&lt;h3&gt;UUIDs For Every Post&lt;/h3&gt;&lt;p&gt;Eventually the time will come where you want a unique identifier for a piece of content. Maybe it is to feed it into another system, maybe it is an ID for RSS feeds. No matter what it is it never hurts to have some identifiers for your content. I am now putting UUIDs into the frontmatter (YAML) section of every Markdown file I add. &lt;/p&gt;&lt;h3&gt;Static Permalinks&lt;/h3&gt;&lt;p&gt;Some static site generators will define the permalink of a post by running code over some of the post's information like the title, slug, date, etc. I have found that a permalink should be permanent and thus there is no point in defining it in code. Just put the entire link into your post's metadata and whatever site generator you end up switching to, you'll know where that piece of content should be available in the end.&lt;/p&gt;&lt;p&gt;This means that maybe sometimes my URL schema isn't perfectly consistent but at the same time it also means I don't have to deal with redirects that would need to be configured in some external system system (e.g. websever/S3/Cloudfront).&lt;/p&gt;&lt;p&gt;Because I don't want to type out a UUID and permalink everytime I create a new post I created a little GitHub action that adds these fields to posts that don't already have it. &lt;/p&gt;&lt;h3&gt;Commit Everything&lt;/h3&gt;&lt;p&gt;Committing generated files is one of these things that intuitively sounds wrong but my blog went through so many design iterations and changes and I would love to be able to just go back through those for a good trip down memory lane. In theory the source code is still there but in reality I'm rarely in the mood to get some code working again that I used to use five years ago.&lt;/p&gt;&lt;p&gt;I'm now commiting all files that you can see here in the &lt;code&gt;_site&lt;/code&gt; directory of the repository backing this blog. &lt;/p&gt;&lt;h3&gt;Automation&lt;/h3&gt;&lt;p&gt;I didn't intend to touch on this but one thing that I'm leaning into a lot for this rewrite is automating all kinds of things. As I write this post on &lt;a href="https://prose.io"&gt;prose.io&lt;/a&gt; the frontmatter only has a title. As soon as I commit it an action will run to add &lt;code&gt;uuid&lt;/code&gt;, &lt;code&gt;permalink&lt;/code&gt;, &lt;code&gt;date-published&lt;/code&gt;. This being easy to setup is a somewhat recent development, I guess last time around this wouldn't have been as easy as it is now. But it is exciting to me because it means I can just focus on writing and don't have to switch to a terminal to run &lt;code&gt;lumo -e '(random-uuid)'&lt;/code&gt; or a deploy script.&lt;/p&gt;&lt;p&gt;This post is the first one that is being published using this automated setup so wish me luck as I hit the save &amp;amp; commit button. &lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:3e616db0-a417-4bc4-93d0-b2a24256ab86</id><title>Working with Firebase Documents in ClojureScript</title><published>2019-09-09T00:00:00.00Z</published><updated>2019-09-09T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/using-cljs-bean-to-wrap-firebase-documents.html" type="text/html" title="Working with Firebase Documents in ClojureScript" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/using-cljs-bean-to-wrap-firebase-documents.html">&lt;h1&gt;Working with Firebase Documents in ClojureScript&lt;/h1&gt;&lt;p&gt;In a project &lt;a href="https://icebreaker.video"&gt;I‚Äôm currently working on&lt;/a&gt; we‚Äôre making use of Google's &lt;a href="https://firebase.google.com"&gt;Firebase&lt;/a&gt; to store domain data and run cloud functions.&lt;/p&gt;&lt;p&gt;In Firestore, which is Firebase‚Äôs database offering, every document is essentially a Javascript object. While interop in ClojureScript is pretty good we ended up converting the raw data of these documents to ClojureScript data structures using &lt;code&gt;js-&amp;gt;clj&lt;/code&gt;. This also meant we‚Äôd need to convert them back to JS objects before writing them to Firestore.&lt;/p&gt;&lt;p&gt;Because IDs are technically not part of the document the project adopted a pattern of representing documents as tuples:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;[id (js-&amp;gt;clj firestore-data)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works but isn‚Äôt particularly extensible. What if we also wanted to retain the ‚ÄúFirestore Reference‚Äù specifying a documents location inside the database? (Firestore stores data in a tree-like structure.)&lt;/p&gt;&lt;p&gt;It also leads to some funky gymnastics when working with collections of documents:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(sort-by (comp :join_dt second) list-of-document-tuples)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Could be worse... but also could be better.&lt;/p&gt;&lt;p&gt;This blogpost will compare various approaches approach to address the problems above using &lt;a href="https://github.com/mfikes/cljs-bean"&gt;cljs-bean&lt;/a&gt;, basic ClojureScript data structures, custom protocols and &lt;code&gt;:extend-via-metadata&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;cljs-bean&lt;/h2&gt;&lt;p&gt;With the recent release of &lt;a href="https://github.com/mfikes/cljs-bean"&gt;cljs-bean&lt;/a&gt; we have an interesting alternative to &lt;code&gt;js-&amp;gt;clj&lt;/code&gt;. Instead of eagerly walking the structure and converting all values to their ClojureScript counterparts (i.e. persistent data structures) the original object is wrapped in a thin layer that allows us to use it as if it were a ClojureScript-native data structure:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(require '[cljs-bean.core :as cljs-bean])

(-&amp;gt; (cljs-bean/bean #js {&amp;quot;some_data&amp;quot; 1, :b 2})
    (get :some_data)) ; =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Given a Firestore &lt;a href="https://firebase.google.com/docs/reference/js/firebase.firestore.QueryDocumentSnapshot"&gt;QueryDocumentSnapshot&lt;/a&gt; we can make the JS object representing the data easily accessible from ClojureScript:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(-&amp;gt; (cljs-bean/-&amp;gt;clj (.data query-document-snapshot))
    (get :some_field))

;; (cljs-bean/-&amp;gt;clj data) is roughly the same as
;; (cljs-bean/bean data :recursive true)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The bean is immutable and can be used in client side app-state as if it is one of ClojureScript‚Äôs persistent data structures.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; Updating a bean using &lt;code&gt;assoc&lt;/code&gt; or similar will create a copy of the object (Copy-on-Write). This is less performant and more GC intensive than with persistent data structures. Given that the data is usually quite small and that the document representations in our app state mostly aren‚Äôt written to directly this is probably ok (&lt;a href="https://github.com/mfikes/cljs-bean/issues/72"&gt;cljs-bean #72&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Whenever we want to use the raw object to update data in Firestore we can simply call &lt;code&gt;-&amp;gt;js&lt;/code&gt; on the bean. Conveniently this will fall back to &lt;code&gt;clj-&amp;gt;js&lt;/code&gt; when called on ClojureScript data structures.&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(.set some-ref (cljs-bean/-&amp;gt;js our-bean))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Arguably the differences to using plain &lt;code&gt;clj-&amp;gt;js&lt;/code&gt; aren‚Äôt monumental but working with a database representing data as JS objects it is nice to retain those original objects.&lt;/p&gt;&lt;h2&gt;Integrating Firestore Metadata&lt;/h2&gt;&lt;p&gt;Now we got beans. But they still don‚Äôt contain the document ID or reference. In most places we don‚Äôt care about a documents ID or reference. So how could we enable the code below while retaining ID and reference?&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(sort-by :join_dt participants)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let‚Äôs compare the various options we have.&lt;/p&gt;&lt;h3&gt;Tuples and Nesting&lt;/h3&gt;&lt;p&gt;I already described the tuple-based approach above. Another, similar, approach achieves the same by nesting the data in another map. Both fall short on the requirement to make document fields directly accessible.&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;;; structure
{:id &amp;quot;some-id&amp;quot;, :ref &amp;quot;/events/some-id&amp;quot;, :data document-data}
;; usage (including gymnastics)
(sort-by (comp :join_dt :data) participants)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I‚Äôm not too fond of either approach since they both expose a specific implementation detail, that the actual document data is nested, at the call site. In a way my critique of this approach is similar to why &lt;a href="https://youtu.be/Sjb6y19YIWg"&gt;Eric Normand advocated for getters in his IN/Clojure ‚Äô19 talk&lt;/a&gt; ‚Äî as far as I understand anyways.&lt;/p&gt;&lt;h3&gt;Addition of a Special Key&lt;/h3&gt;&lt;p&gt;Another approach could be to add metadata directly to the document data.&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(defn doc [query-doc-snapshot]
  (-&amp;gt; (cljs-bean/-&amp;gt;clj (.data query-doc-snapshot))
      (assoc ::meta {:id (.-id query-doc-snapshot
                     :ref (.-ref query-doc-snapshot})))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is reasonable and makes document fields directly accessible. However it also requires us to separate document fields and metadata before passing the data to any function writing to Firestore.&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;;; before writing we need to remove ::meta
(.set some-ref (cljs-bean/-&amp;gt;js (dissoc document-data ::meta))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think this is a reasonable solution that improves upon some of the issues with the tuple and nesting approach. I realize that this isn‚Äôt a huge change but this inversion of how things are nested does give us that direct field access that the nesting approach did not.&lt;/p&gt;&lt;h3&gt;Protocols and &lt;code&gt;:extend-via-metadata&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;An approach I‚Äôve found particularly interesting to play with makes use of a protocol that can be implemented via metadata, as enabled by the new &lt;code&gt;:extend-via-metadata&lt;/code&gt; option. This capability was added in &lt;a href="https://clojure.org/reference/protocols#_extend_via_metadata"&gt;Clojure 1.10&lt;/a&gt; and subsequently added to ClojureScript with the &lt;a href="https://clojurescript.org/news/2019-01-31-release"&gt;1.10.516 release&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(defprotocol IFirestoreDocument
  :extend-via-metadata true
  (id [_] &amp;quot;Return the ID (string) of this document&amp;quot;)
  (ref [_] &amp;quot;Return the Firestore Reference object&amp;quot;))

(defn doc [query-doc-snapshot]
  (with-meta
    (cljs-bean/-&amp;gt;clj (.data query-doc-snapshot))
    {`id (fn [_] (.-id query-doc-snapshot))
     `ref (fn [_] (.-ref query-doc-snapshot))}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using &lt;code&gt;with-meta&lt;/code&gt; we extend a specific instance of a bean to implement the &lt;code&gt;IFirestoreDocument&lt;/code&gt; protocol. This allows direct access to document properties while retaining important metadata:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(:name participant) ; =&amp;gt; &amp;quot;Martin&amp;quot;
(firebase/id participant) ; =&amp;gt; &amp;quot;some-firebase-id&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At call sites we use a well-defined API (defined by the protocol) instead of reaching into nested maps whose structure may need to change as our program evolves. This arguably could also be achieved with plain functions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Sidenote:&lt;/strong&gt; A previous iteration of this used &lt;code&gt;specify!&lt;/code&gt;. Specify modifies the bean instance however, meaning that whenever we‚Äôd update a bean the protocol implementation got lost. In contrast metadata is carried over across updates.&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p&gt;Using &lt;a href="https://github.com/mfikes/cljs-bean"&gt;cljs-bean&lt;/a&gt; we‚Äôve enabled idiomatic property access for JS data structures without walking the entire document and converting it to a persistent data structure. We also retain the original Javascript object making it easy to use for Firestore API calls.&lt;/p&gt;&lt;p&gt;We‚Äôve compared different ways of attaching additional metadata to those documents using compound structures as well as  the new and shiny &lt;code&gt;:extend-via-metadata&lt;/code&gt;. Using it we‚Äôve extended instances of beans to support a custom protocol allowing open ended extension without hindering the ergonomics of direct property access.&lt;/p&gt;&lt;p&gt;While I really enjoyed figuring out how to extend beans using &lt;code&gt;:extend-via-metadata&lt;/code&gt; it turned out that any approach storing data in ‚Äúunusual places‚Äù (i.e. metadata) causes notable complexity when also wanting to serialize the data.&lt;/p&gt;&lt;p&gt;Serializing metadata is something that &lt;a href="https://gist.github.com/mfikes/3a160a1504debd31e5771736256ca022"&gt;has been added to Transit quite some time ago&lt;/a&gt; but compared to the plug and play serialization we get when working with plain maps it did not seem worth it. Even if set up properly the protocol implementations, which are functions, are impossible to serialize.&lt;/p&gt;&lt;p&gt;Ultimately we ended up with plain beans and storing metadata under a well known key that is removed before writing the data to Firestore again:&lt;/p&gt;&lt;pre&gt;&lt;code class="clj"&gt;(defn doc [query-doc-snapshot]
  (-&amp;gt; (cljs-bean/-&amp;gt;clj (.data query-doc-snapshot))
      (assoc ::meta {:id (.-id query-doc-snapshot)
                     :ref (.-ref query-doc-snapshot)})))

(defn id [doc]
  (-&amp;gt; doc ::meta :id))

(defn ref [doc]
  (-&amp;gt; doc ::meta :ref))

(defn data [doc]
  (cljs-bean/-&amp;gt;js (dissoc doc ::meta)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you're using Firebase or comparable systems, I'd be curious to &lt;a href="https://clojureverse.org/t/working-with-firebase-documents-in-clojurescript/4813"&gt;hear if you do something similar on ClojureVerse&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thanks to Matt Huebert and Mike Fikes for their feedback &amp;amp; ideas.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:b728ab75-373e-46b5-ba68-b01d5918cd70</id><title>4 Small Steps Towards Awesome Clojure Docstrings</title><published>2019-01-28T00:00:00.00Z</published><updated>2019-01-28T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/writing-awesome-docstrings.html" type="text/html" title="4 Small Steps Towards Awesome Clojure Docstrings" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/writing-awesome-docstrings.html">&lt;h1&gt;4 Small Steps Towards Awesome Clojure Docstrings&lt;/h1&gt;&lt;p&gt;Through my work on &lt;a href="https://cljdoc.org"&gt;cljdoc&lt;/a&gt; I spent a lot of time looking at documentation and implementing code to render documentation. This made me more aware of the various facilities in Clojure documentation generators (codox, cljdoc, ...) and I would like to use this post to share that awareness with the wider Clojure community.&lt;/p&gt;&lt;h2&gt;1. Backtick-Quote Function Arguments &amp;amp; Special Keywords&lt;/h2&gt;&lt;p&gt;Whenever referring to an argument or special keywords, quote them using Markdown style ‚Äòbackticks‚Äò. This makes them stand out more when reading the docstring, making it easier to visually parse and skim. Emacs also nicely highlights this (possibly others too).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defn conj!
  [coll x]
  &amp;quot;Adds `x` to the transient collection, and return `coll`. The 'addition'
   may happen at different 'places' depending on the concrete type.&amp;quot;
  ,,,)
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;2. Link To Other Functions Using [[Wikilink]] Syntax&lt;/h2&gt;&lt;p&gt;Functions call each other and sometimes it can be useful to link to other functions. In Codox and cljdoc you can do this by wrapping the var name in wikilink-style double brackets:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defn unlisten!
  &amp;quot;Removes registered listener from connection. See also [[listen!]].&amp;quot;
  [conn key]
  (swap! (:listeners (meta conn)) dissoc key))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Featured here: &lt;a href="https://cljdoc.org/d/datascript/datascript/0.17.1/api/datascript.core#unlisten!"&gt;&lt;code&gt;datascript.core/unlisten!&lt;/code&gt;&lt;/a&gt;. To link to vars in other namespaces, fully qualify the symbol in the brackets, e.g. &lt;code&gt;[[datascript.core/listen!]]&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;3. Include Small Examples&lt;/h2&gt;&lt;p&gt;On cljdoc all docstrings are interpreted as Markdown. With Codox this can be achived with a small configuration tweak. This means you have access to all the text formatting facilities that Markdown provides including code blocks. Code blocks can be fantastic when trying to show how a function is used in a bigger context, as very nicely shown in the &lt;a href="https://cljdoc.org/d/keechma/toolbox/0.1.23/api/keechma.toolbox.dataloader.controller#register"&gt;Keechma Toolbox documentation&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;a href="https://cljdoc.org/d/keechma/toolbox/0.1.23/api/keechma.toolbox.dataloader.controller#register"&gt;&lt;img alt="keechma register" src="/images/keechma-register.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;See &lt;a href="https://github.com/keechma/keechma-toolbox/blob/176c96a7f8b97a7d67f0d54d1351c23db052d71c/src/cljs/keechma/toolbox/dataloader/controller.cljs#L71-L85"&gt;the source&lt;/a&gt; of this majestic docstring.&lt;/p&gt;&lt;h2&gt;4. Use Tables To Describe Complex Options Maps&lt;/h2&gt;&lt;p&gt;cljdoc's Markdown implementation supports tables as well. Those can be very useful when having a function that receives a map of options, like &lt;a href="https://cljdoc.org/d/metosin/reitit-core/0.2.13/api/reitit.core#router"&gt;&lt;code&gt;reitit.core/router&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;a href="https://cljdoc.org/d/metosin/reitit-core/0.2.13/api/reitit.core#router"&gt;&lt;img alt="reitit core router" src="/images/reitit-router.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;See &lt;a href="https://github.com/metosin/reitit/blob/0.2.13/modules/reitit-core/src/reitit/core.cljc#L417"&gt;the source&lt;/a&gt; of this beautiful docstring.&lt;/p&gt;&lt;h2&gt;Closing&lt;/h2&gt;&lt;p&gt;These trivial to implement improvements can make your docstrings 1000x times nicer to read (scientific studies have shown). Also they will just look plain awesome on &lt;a href="https://cljdoc.org"&gt;cljdoc&lt;/a&gt;. Check out some examplary docstring work done by Nikita Prokopov here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://cljdoc.org/d/rum/rum/0.11.3/api/rum.core"&gt;Rum&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://cljdoc.org/d/datascript/datascript/0.17.1/api/datascript.core"&gt;Datascript&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And &lt;strong&gt;please tell me&lt;/strong&gt; about other projects with exceptional documentation or even more ways to make docstrings awesome.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:229c2b5e-1cdd-4904-9387-8c0491dc1382</id><title>Sustainable Open Source: Current Efforts</title><published>2018-01-19T00:00:00.00Z</published><updated>2018-01-19T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/sustainable-open-source-current-efforts.html" type="text/html" title="Sustainable Open Source: Current Efforts" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/sustainable-open-source-current-efforts.html">&lt;h1&gt;Sustainable Open Source: Current Efforts&lt;/h1&gt;&lt;p&gt;The recent appearance of &lt;a href="http://clojuriststogether.org/"&gt;Clojurists Together&lt;/a&gt;, friends working on &lt;a href="https://openbounty.status.im/"&gt;OpenBounty&lt;/a&gt;, as well as recently finding a lot of energy to work on a documentation platform for the Clojure ecosystem stirred some thoughts about sustainable OpenSource.&lt;/p&gt;&lt;p&gt;Let's say one thing right out of the gate: sustainable OpenSource isn't really a goal on it's own. What the community (users as well as maintainers) strives for is reliability and well-maintained ecosystem components. Businesses and individuals alike depend on those properties ‚Äî not the fact that work done to achieve them is sustainable. That said I don't see any ways to achieve those without sustainability.&lt;/p&gt;&lt;h3&gt;Current Efforts&lt;/h3&gt;&lt;p&gt;There are various platforms trying to improve sustainability of open source efforts that have continued momentum. Many of them with their own ideas how the situation can be improved.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://opencollective.com"&gt;&lt;strong&gt;OpenCollective&lt;/strong&gt;&lt;/a&gt; collects payments fromindividuals and companies and stores funds for organizations. People may then&amp;quot;invoice&amp;quot; the organization. This can be for stickers and labor time alike.&lt;/li&gt;&lt;li&gt;&lt;a href="https://openbounty.status.im/"&gt;&lt;strong&gt;OpenBounty&lt;/strong&gt;&lt;/a&gt; is a bounty platform usedwith cryptocurrencies. Contributors may work on specific issues and get paida bounty which has been defined in advance.&lt;/li&gt;&lt;li&gt;&lt;a href="https://clojuriststogether.org/"&gt;&lt;strong&gt;Clojurists Together&lt;/strong&gt;&lt;/a&gt; collectsmoney from companies and community members to fund open sourceprojects benefitting the overall Clojure ecosystem. People may applywith a project they want to work on and get funding (depending onoverall availability) for a duration of three months.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;All platforms take care of collecting money and have mechanisms for redistributing it. With OpenCollective a community will need to agree on processes to request and distribute funds. Clojurists Together collects money in similar ways to OpenCollective but has a predefined process for how funds are allocated.&lt;/p&gt;&lt;p&gt;Projects like webpack &lt;a href="https://opencollective.com/webpack/expenses"&gt;have embraced&lt;/a&gt;  OpenCollective with people getting reimbursed for expenses but also regular labor invoices for time worked on the project.&lt;/p&gt;&lt;p&gt;OpenBounty also provides some of these processes by assigning bounties to specific tasks. OpenBounty is used in &lt;a href="https://status.im/"&gt;Status.im&lt;/a&gt;'s development process and while I don't believe bounties are the answer to everything I'm excited to watch this space in the future.&lt;/p&gt;&lt;h3&gt;Sustainable Incentives&lt;/h3&gt;&lt;p&gt;Contributing to OpenSource is about incentives. As far as I can judge these often are&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fun &amp;amp; community,&lt;/li&gt;&lt;li&gt;fixing a problem one encountered,&lt;/li&gt;&lt;li&gt;recognition &amp;amp; better job opportunities.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Nothing is wrong with this list but they are not sustainable on their own. Just working for the fuzzy feeling of giving back to a community doesn't pay your bills. As soon as you can no longer afford to work for the fun of it the stability and momentum of projects you contributed to will suffer.&lt;/p&gt;&lt;p&gt;I believe there are two kinds of participants required to achieve reliability, stability and so on:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;There need to be some people contributing on a regular basis. They provideoverall direction, deal with reported issues and incoming contributions.Often projects refer to this as &amp;quot;core&amp;quot;. In my experience stability of an opensource project suffers with fluctuations in the set of &amp;quot;core&amp;quot; people working on it.&lt;/li&gt;&lt;li&gt;There need to be occasional/new contributors. Life will happen(kids, work, etc.) to regular contributors causing a naturaldecline. New contributors discovering they enjoy working on theproject can fill up those gaps.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In my opinion the incentives listed above are not sufficient ‚Äî especially for long-term regular contributors. If work is unpaid it will eventually become stressful to juggle with other responsibilities and people will be forced to step back. New contributors are just as important and I believe there are improvements to be done there as well but ultimately nothing works without a &amp;quot;core&amp;quot; set of people.&lt;/p&gt;&lt;p&gt;I have some further thoughts on how such incentives could be structured which I will explore in a later blog post.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:443e70e4-c49d-4391-ac18-bf478b8e2955</id><title>Maven Snapshots</title><published>2017-06-04T00:00:00.00Z</published><updated>2017-06-04T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/maven-snapshots.html" type="text/html" title="Maven Snapshots" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/maven-snapshots.html">&lt;h1&gt;Maven Snapshots&lt;/h1&gt;&lt;h2&gt;Or: How to use Maven snapshots without setting your hair on fire.&lt;/h2&gt;&lt;p&gt;Ever depended on a Clojure library with a version that ended in &lt;code&gt;-SNAPSHOT&lt;/code&gt;? That's what's called a Maven snapshot.&lt;/p&gt;&lt;p&gt;Maven snapshots are a handy tool to provide pre-release builds to those who are interested. In contrast to proper releases a SNAPSHOT release can be &amp;quot;updated&amp;quot;. And that's where the trouble comes in.&lt;/p&gt;&lt;p&gt;Let's say you depend on a snapshot because it contains a fix you recently contributed to your favorite open source project. A week later another fix is added and released under the same &lt;code&gt;0.1.0-SNAPSHOT&lt;/code&gt; version.&lt;/p&gt;&lt;p&gt;Now it turns out that second fix contained a minor bug. No big deal, it's a pre-release after all. The problem with all this however is that you (Maven) will automatically use the new SNAPSHOT, no action required. A dependency you use in your project &lt;strong&gt;changes without you being aware&lt;/strong&gt; of it. Suddenly stuff breaks. You wonder what happened. Did you change anything? No? Frustration ensues.&lt;/p&gt;&lt;p&gt;Because of this for a long time I thought SNAPSHOTS are evil and instead of using them library authors should release development builds with a qualifier like &lt;code&gt;0.1.0-alpha1&lt;/code&gt;. I still think this is a good practice and try to adhere to it myself as much as possible.&lt;/p&gt;&lt;h2&gt;In the meantime there is another way to safely depend on Maven snapshots though.&lt;/h2&gt;&lt;p&gt;Whenever you push a SNAPSHOT version to a Maven repository (like Clojars) it does not actually overwrite the previously uploaded jar but creates a separate jar with a version like this: &lt;code&gt;0.1.0-20170301.173959-4&lt;/code&gt;. Once the upload is complete it merely changes the SNAPSHOT version to point to that release. All previous releases are still available (by default Maven repos only keep the latest SNAPSHOT version but Clojars keeps them all).&lt;/p&gt;&lt;p&gt;This means instead of depending on a &lt;strong&gt;mutable&lt;/strong&gt; version you can now depend on an &lt;strong&gt;immutable&lt;/strong&gt; version. Oh do we love immutability.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[group-id/project-id &amp;quot;0.1.0-20170301.173959-4&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finding these version identifiers isn't the easiest thing but basically:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;you go to the page of a jar on Clojars, e.g. &lt;a href="https://clojars.org/adzerk/boot-cljs/"&gt;adzerk/boot-cljs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;in the sidebar that lists recent versions, click &amp;quot;Show All Versions&amp;quot;&lt;/li&gt;&lt;li&gt;&lt;a href="https://clojars.org/adzerk/boot-cljs/versions"&gt;versions page&lt;/a&gt;  you can find a note at the bottom that leads you to the &lt;a href="https://repo.clojars.org/adzerk/boot-cljs/"&gt;Maven repository&lt;/a&gt;&lt;/li&gt;&lt;li&gt;if you click on a SNAPSHOT version there you get to a page that &lt;a href="https://repo.clojars.org/adzerk/boot-cljs/2.0.0-SNAPSHOT/"&gt;lists all the stable identifiers for that version&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To get to the Maven repo page directly you can also just put a &lt;code&gt;repo.&lt;/code&gt; subdomain in front of a given Clojars project url:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://clojars.org/adzerk/boot-cljs/
https://repo.clojars.org/adzerk/boot-cljs/
        ^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And they depend on SNAPSHOTs happily ever after.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:461f273b-8587-42ce-be1a-6efe22a78d2e</id><title>Requiring Closure Namespaces</title><published>2017-05-11T00:00:00.00Z</published><updated>2017-05-11T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/requiring-closure-namespaces.html" type="text/html" title="Requiring Closure Namespaces" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/requiring-closure-namespaces.html">&lt;h1&gt;Requiring Closure Namespaces&lt;/h1&gt;&lt;p&gt;Yet another post on properly using the &lt;a href="https://developers.google.com/closure/library/"&gt;Closure Library&lt;/a&gt; from within ClojureScript. This time we'll discuss how to require different namespaces from Closure and the edge-cases that may not be immediately intuitive.&lt;/p&gt;&lt;h2&gt;Namespaces, Constructors, Constants&lt;/h2&gt;&lt;p&gt;When requiring things from Closure you mostly deal with its namespaces. Most namespaces have functions defined in them, some also contain constructors or constants. Functions are camelCased. Constructors are Capitalized. Constants are ALL_CAPS. The line between namespaces and constructors gets a bit blurry sometimes as you'll see shortly.&lt;/p&gt;&lt;p&gt;Let's take &lt;code&gt;goog.Timer&lt;/code&gt; as an example. As per the previous paragraph you can infer that &lt;code&gt;Timer&lt;/code&gt; is a constructor. Just like in Clojure we use &lt;code&gt;:import&lt;/code&gt; to make constructors available:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(ns my.app
  (:import [goog Timer]))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we may use the &lt;code&gt;Timer&lt;/code&gt; constructor as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(def our-timer (Timer. interval))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great. We have a timer. Now we'll want to do something whenever it &amp;quot;ticks&amp;quot;. The &lt;code&gt;Timer&lt;/code&gt; instance emits events which we can listen to. Listening to events can be done with the function &lt;code&gt;goog.events.listen&lt;/code&gt;. As you can see, this function is not part of any class instance - it just exists in the &lt;code&gt;goog.events&lt;/code&gt; namespace. To make the &lt;code&gt;listen&lt;/code&gt; function accessible you need to require the namespace containing it. This is similar to how we require regular ClojureScript namespaces:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(ns my.app
  (:require [goog.events :as events])
  (:import [goog Timer]))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can refer to the function as &lt;code&gt;events/listen&lt;/code&gt; now. To listen to specific kinds of events we need to pass an event type to this function. Many Closure namespaces define constants that you can use to refer to those event types. Internally they're often just strings or numbers but this level of indirection shields you from some otherwise breaking changes to a namespace's implementation.&lt;/p&gt;&lt;p&gt;Looking at the &lt;a href="https://google.github.io/closure-library/api/goog.Timer.html"&gt;Timer&lt;/a&gt; docs you can find a constant &lt;code&gt;TICK&lt;/code&gt;. Now we required the constructor and are able to use that but the constructor itself does not allow us to access other parts of the namespace. So let's require the namespace.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(ns my.app
  (:require [goog.events :as events]
            [goog.Timer :as timer]) ; &amp;lt;-- new
  (:import [goog Timer]))

(def our-timer (Timer. interval))

(events/listen our-timer timer/TICK (fn [e] (js/console.log e)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember the blurry line mentioned earlier? We just required the &lt;code&gt;goog.Timer&lt;/code&gt; namespace both as a constructor and as a namespace. While this example works fine now, there are two more edge cases worth pointing out.&lt;/p&gt;&lt;h2&gt;Deeper Property Access&lt;/h2&gt;&lt;p&gt;Closure comes with a handy namespace for keyboard shortcuts, aptly named &lt;a href="https://google.github.io/closure-library/api/goog.ui.KeyboardShortcutHandler.html"&gt;&lt;code&gt;KeyboardShortcutHandler&lt;/code&gt;&lt;/a&gt;. As you can guess, &lt;code&gt;KeyboardShortcutHandler&lt;/code&gt; is a constructor that we can use via &lt;code&gt;:import&lt;/code&gt;. Since it emits events, the namespace also provides an enum of events that we can use to listen for specific ones. In contrast to the timer's &lt;code&gt;TICK&lt;/code&gt;, this enumeration is &amp;quot;wrapped&amp;quot; in &lt;code&gt;goog.ui.KeyBoardShortcutHandler.EventType&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;EventType&lt;/code&gt; property contains &lt;code&gt;SHORTCUT_PREFIX&lt;/code&gt; and &lt;code&gt;SHORTCUT_TRIGGERED&lt;/code&gt;. So far we've only imported the constructor. At this point you might try this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(:require [goog.ui.KeyBoardShortcutHandler.EventType :as event-types])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;But that won't work&lt;/strong&gt;. The &lt;code&gt;EventType&lt;/code&gt; is not a namespace but an enum provided by the &lt;code&gt;KeyboardShortcutHandler&lt;/code&gt; namespace. To access the enum you need to access it through the namespace providing it. In the end this will look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(:require [goog.ui.KeyBoardShortcutHandler :as shortcut])

(events/listen a-shortcut-handler shortcut/EventType.SHORTCUT_TRIGGERED ,,,)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note how the slash always comes directly after the namespace alias.&lt;/p&gt;&lt;h2&gt;goog.string.format&lt;/h2&gt;&lt;p&gt;Last but not least another weird one. &lt;code&gt;goog.string.format&lt;/code&gt; is a namespace that &lt;a href="https://google.github.io/closure-library/api/goog.string.format.html"&gt;seems to&lt;/a&gt; contain a single function called &lt;code&gt;format&lt;/code&gt;. If you require the format namespace however, it turns out to contain no function of that name:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(:require [goog.string.format :as format])

(format/format ,,,) ; TypeError: goog.string.format.format is not a function
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now in cases like this it often helps to look at &lt;a href="https://github.com/google/closure-library/blob/master/closure/goog/string/stringformat.js"&gt;the source code&lt;/a&gt; directly. Usually Closure Library code is very readable. The format function is defined as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;goog.string.format = function(formatString, var_args) {
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see it's defined as a property of &lt;code&gt;goog.string&lt;/code&gt;, so we can access it via &lt;code&gt;goog.string/format&lt;/code&gt; (or an alias you might have chosen when requiring &lt;code&gt;goog.string&lt;/code&gt;).  In that sense &lt;code&gt;goog.string.format&lt;/code&gt; is not a real namespace but rather something you require for its side effects ‚Äî in this case the definition of another function in &lt;code&gt;goog.string&lt;/code&gt;. I have no idea why they chose to split things up in that way. ¬Ø\&lt;i&gt;(„ÉÑ)&lt;/i&gt;/¬Ø&lt;/p&gt;&lt;h2&gt;For Reference&lt;/h2&gt;&lt;p&gt;I scratched my head many times about one or the other aspect of this and usually ended up looking at old code. Next time I'll look at the handy list below üôÇ&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Require Google Closure &lt;strong&gt;namespaces&lt;/strong&gt; just as you'd require ClojureScript namespaces&lt;ul&gt;&lt;li&gt;&lt;code&gt;(:require [goog.events :as events])&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;base &lt;code&gt;goog&lt;/code&gt; namespace&lt;/strong&gt; is autmatically required as if you'd have  &lt;code&gt;[goog :as goog]&lt;/code&gt; in your list of required namespaces.&lt;ul&gt;&lt;li&gt;This implies that you can refer to &lt;code&gt;goog.DEBUG&lt;/code&gt; as &lt;code&gt;goog/DEBUG&lt;/code&gt;. Never refer to &lt;code&gt;goog&lt;/code&gt; through the global Javascript namespace as in &lt;code&gt;js/goog.DEBUG&lt;/code&gt;. (&lt;a href="https://dev.clojure.org/jira/browse/CLJS-2023"&gt;CLJS-2023&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Require &lt;strong&gt;constructors&lt;/strong&gt; using one of the two forms. In either case you may use &lt;code&gt;Timer.&lt;/code&gt; to construct new objects.&lt;ul&gt;&lt;li&gt;&lt;code&gt;(:import [goog Timer])&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;(:import goog.Timer)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;There's an outstanding ticket about &lt;a href="https://dev.clojure.org/jira/browse/CLJS-1734"&gt;imports with the same name shadowing each other&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Only access &lt;strong&gt;non-constructor parts&lt;/strong&gt; of a namespace through a namespace that has been &lt;code&gt;:require&lt;/code&gt;d&lt;/li&gt;&lt;li&gt;Always use slash after the namespace alias, use dot for deeper property access.&lt;/li&gt;&lt;li&gt;Requiring &lt;code&gt;goog.string.format&lt;/code&gt; will define a function &lt;code&gt;format&lt;/code&gt; in the &lt;code&gt;goog.string&lt;/code&gt; namespace.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Enjoy&lt;/h2&gt;&lt;p&gt;For many of the things described here there are alternative ways to do them. We still build on Javascript after all. The ones I've chosen here are the ones that seem most idiomatic from a Clojurescript perspective.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href="https://twitter.com/pesterhazy"&gt;Paulus Esterhazy&lt;/a&gt; and &lt;a href="https://twitter.com/anmonteiro90"&gt;Ant√≥nio Monteiro&lt;/a&gt; for proof-reading this post and offering their suggestions.&lt;/p&gt;&lt;p&gt;If you feel like reading more about utilizing the Closure Library and compiler in ClojureScript I have a few more posts on those:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="/posts/simple-debouncing-in-clojurescript.html"&gt;Simple Debouncing in ClojureScript&lt;/a&gt;, showing how to build a simple debouncing mechanism with the facilities provided by the Closure Library.&lt;/li&gt;&lt;li&gt;&lt;a href="/posts/parameterizing-clojurescript-builds.html"&gt;Parameterizing ClojureScript Builds&lt;/a&gt;, outlining ways to modify ClojureScript builds using the Closure compiler's ability to customize constants at compile-time.&lt;/li&gt;&lt;li&gt;&lt;a href="/posts/just-in-time-script-loading-with-react-and-clojuresript.html"&gt;Just-in-Time Script Loading&lt;/a&gt;, describing how to load 3rd party scripts like Stripe using React components and Closure's script loader.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:271f273e-8587-42ce-be1a-6efe22a78d2e</id><title>Simple Debouncing in ClojureScript</title><published>2017-04-16T00:00:00.00Z</published><updated>2017-04-16T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/simple-debouncing-in-clojurescript.html" type="text/html" title="Simple Debouncing in ClojureScript" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/simple-debouncing-in-clojurescript.html">&lt;h1&gt;Simple Debouncing in ClojureScript&lt;/h1&gt;&lt;p&gt;This is a short post on a problem that eventually occurs in any Javascript app: debouncing. While there are various approaches to this problem I want to focus on one that relies on nothing else than the &lt;a href="https://developers.google.com/closure/library/"&gt;Closure Library&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Why Debounce&lt;/h2&gt;&lt;p&gt;Debouncing is a technique to limit the rate of an action. Usually this rate is specified as an interval in which the action may be executed at most once. If execution of the action is requested multiple times in one interval it is important that the most recently supplied arguments are used when eventually executing the action.&lt;/p&gt;&lt;p&gt;(If you only care about the rate limiting and using the latest arguments isn't a requirement that's called throttling.)&lt;/p&gt;&lt;p&gt;Use cases for debouncing are plentiful. Auto-saving something the user is typing, fetching completions or triggering server side validations are some examples that come to mind.&lt;/p&gt;&lt;h2&gt;Closure Library Facilities&lt;/h2&gt;&lt;p&gt;I've long been a fan of the Closure Library that comes with ClojureScript.  Many common problems are solved in elegant and efficient ways, &lt;a href="https://google.github.io/closure-library/"&gt;the documentation&lt;/a&gt; gives a good overview of what's in the box and the code and tests are highly readable.&lt;/p&gt;&lt;p&gt;For the problem of debouncing Closure provides a construct &lt;a href="https://google.github.io/closure-library/api/goog.async.Debouncer.html"&gt;goog.async.Debouncer&lt;/a&gt; that allows you to debounce arbitrary functions. A short, very basic example in Javascript:&lt;/p&gt;&lt;pre&gt;&lt;code class="js"&gt;var debouncer = new goog.async.Debouncer(function(x) {alert(x)}, 500);
debouncer.fire(&amp;quot;Hello World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create an alert saying &amp;quot;Hello World!&amp;quot; 500ms after the &lt;code&gt;fire()&lt;/code&gt; function has been called. Now let's translate this to ClojureScript and generalize it slightly. In the end we want to be able to debounce any function.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(ns app.debounce
  (:import [goog.async Debouncer]))

(defn save-input! [input]
  (js/console.log &amp;quot;Saving input&amp;quot; input))

(defn debounce [f interval]
  (let [dbnc (Debouncer. f interval)]
    ;; We use apply here to support functions of various arities
    (fn [&amp;amp; args] (.apply (.-fire dbnc) dbnc (to-array args)))))

;; note how we use def instead of defn
(def save-input-debounced!
  (debounce save-input! 1000))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What the &lt;code&gt;debounce&lt;/code&gt; function does is basically returning a new function wrapped in a &lt;code&gt;goog.async.Debouncer&lt;/code&gt;. When and how you create those debounced functions is up to you. You can create them at application startup using a simple &lt;code&gt;def&lt;/code&gt; (as in the example) or you might also dynamically create them as part of your component/application lifecycle. (If you create them dynamically you might want to learn about &lt;code&gt;goog.Disposable&lt;/code&gt;.)&lt;/p&gt;&lt;p&gt;There's one caveat with our &lt;code&gt;debounce&lt;/code&gt; implementation above you should also be aware of: because we use Javascript's &lt;code&gt;apply&lt;/code&gt; here we don't get any warnings if we end up calling the function with the wrong number of arguments. I'm sure this could be improved with a macro but that's not part of this article.&lt;/p&gt;&lt;p&gt;Also small disclaimer on the code: I mostly tested it with &lt;a href="https://github.com/anmonteiro/lumo"&gt;Lumo&lt;/a&gt; in a REPL but I'm confident that it will work fine in a browser too.&lt;/p&gt;&lt;h2&gt;Debounce Away&lt;/h2&gt;&lt;p&gt;I hope this helps and shows that there's much useful stuff to be found in Closure Library. To this day it's a treasure trove that has rarely dissappointed me. Sometimes things are a bit confusing (I still don't understand &lt;code&gt;goog.i18n&lt;/code&gt;) but there are many truly simple gems to be found. &lt;em&gt;Maybe I should do a post about my favorites some day...&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The &lt;a href="https://google.github.io/closure-library"&gt;documentation site&lt;/a&gt; has a search feature and a tree view of all the namespaces of the library; use it next time when you're about to add yet another Javascript dependency to your project.&lt;/p&gt;&lt;p&gt;Also not a big surprise I guess but all of the Closure Library's code is Closure Compiler compatible just like your ClojureScript code. This means any functions, constants etc. that are never used will be removed by the compiler's Dead Code Elimination feature. Yeah!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update 2017-05-12&lt;/strong&gt; ‚Äî Multiple people have noted that there also is a function &lt;a href="https://google.github.io/closure-library/api/goog.functions.html#debounce"&gt;&lt;code&gt;goog.functions.debounce&lt;/code&gt;&lt;/a&gt;. For many basic cases this might result in simpler, more concise code.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:a658e901-04ec-4ff4-a2d5-c8c72231e3e7</id><title>Making Remote Work</title><published>2017-03-25T00:00:00.00Z</published><updated>2017-03-25T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/making-remote-work.html" type="text/html" title="Making Remote Work" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/making-remote-work.html">&lt;h1&gt;Making Remote Work&lt;/h1&gt;&lt;p&gt;I've been working remotely for a bit over a year now. Most projects went pretty well. Some not so much. I've worked with fully distributed teams and as a satellite worker with on-site teams. I'm not an expert‚Äîbut I've learned some things.&lt;/p&gt;&lt;p&gt;What follows are some basic ideas to make remote teams work. I hope these help companies and remote workers set things up for success.&lt;/p&gt;&lt;h3&gt;Focus on Self Sufficiency&lt;/h3&gt;&lt;p&gt;In an office you walk up to somebody (read: interrupt their work) and discuss stuff. In a remote environment you may need to schedule, then wait, then deal with connectivity issues, then have a discussion. Sometimes the waiting part alone can take the better part of a day.&lt;/p&gt;&lt;p&gt;Synchronous communication, including chat, is great and necessary but the more your work routine relies on it, the more you might unknowingly slow everyone down.&lt;/p&gt;&lt;p&gt;With that in mind, start thinking of communication as a cost factor. Being slowed down costs time, momentum and motivation. These are the things you usually want to preserve at all cost. And that's where self-sufficiency comes in.&lt;/p&gt;&lt;p&gt;Being self sufficient in work means knowing what to do in order to advance the project and having the means to execute. The easiest way to make people understand what is worth working on is making them understand the business. Sometimes more specific goals will also do the job. But generally the broader the better.&lt;/p&gt;&lt;p&gt;Once everyone is able to develop ideas based on their understanding of the business all that is missing is The Feedback Loop‚Ñ¢. Feedback is often a critical part of UI design but that does not mean it isn't applicable to other domains. Enable your team to see the impact of their work. Define relevant metrics and measure, measure, measure, graph, graph, graph. Share and celebrate accomplishments.&lt;/p&gt;&lt;h3&gt;Document With Rigour&lt;/h3&gt;&lt;p&gt;Again, communication has a cost. It's fun and important too. You want to spend that valuable face-time with your colleagues chatting about last weekends hike or that tricky problem you're banging your head against. You don't want to spend it figuring out how to run migrations or update your environment so that things work again with those latest changes.&lt;/p&gt;&lt;p&gt;Have a &lt;code&gt;README&lt;/code&gt;. Make sure to add a table of contents. This is reference material, not an essay. Maybe try Asciidoc if Markdown feels too restrictive. Ensure that pull requests are reviewed with documentation changes in mind. With GitHub's pull request templates it's easy to remind team members to update documentation.&lt;/p&gt;&lt;p&gt;That hike last week was nice by the way:&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/images/hike.jpg"&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="pa2 tc f3 blue"&gt;¬∑  ¬∑  ¬∑&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I realize the up-front cost of making someone understand the intricacies of a business might be higher than just telling them to &amp;quot;do this&amp;quot;. There may be smaller projects where deep understanding is not necessary. It seems reasonable to think that everyone does a better job if they do understand the business though.&lt;/p&gt;&lt;p&gt;Now all these suggestions are probably applicable to any team, not only remote ones. However they are of particular importance for remote teams.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p class="f6 ba br2 b‚Äìblue pa3 mt4"&gt;Distributed teams face special challenges. &lt;a href="https://goo.gl/forms/BTteLFXQFopWOXxt1"&gt;I would love to hear yours&lt;/a&gt; and see if there might be something that could be built to help.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:21eecbc4-1be6-4930-89ae-9c36c69e0a16</id><title>Just-in-Time Script Loading With React And ClojureScript</title><published>2016-11-25T00:00:00.00Z</published><updated>2016-11-25T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/just-in-time-script-loading-with-react-and-clojuresript.html" type="text/html" title="Just-in-Time Script Loading With React And ClojureScript" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/just-in-time-script-loading-with-react-and-clojuresript.html">&lt;h1&gt;Just-in-Time Script Loading With React And ClojureScript&lt;/h1&gt;&lt;p&gt;In the last projects I've been working on I've come accross the situation that I needed to load some external script (Stripe, Google Maps, ...) at a certain point and then do something with the features exposed by this newly imported library. Some times you might be able to circumvent loading a library at runtime by bundling it with your main application but even then you might want to consider splitting it into a separate module and loading it when it's actually needed.&lt;/p&gt;&lt;p&gt;We won't talk about module splitting and loading in this blog post though and instead focus on loading things like Stripe and Google Maps that just can't be bundled with your application.&lt;/p&gt;&lt;p&gt;The easy way to load these would be using a simple script tag:&lt;/p&gt;&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://js.stripe.com/v2/&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this approach however you load the script for every user even though they may never, or already went through, your payment flow. A better way would be to load it when the user actually wants to pay you. I've heard fast loading apps make that more likely as well ;) Also you might say that these scripts could be cached, but even if they are: you still pay for the parsing and execution time.&lt;/p&gt;&lt;p&gt;So how can we go about that? What follows is one pattern that I think is fairly simple and elegant and also a nice use of React's lifecycle features and higher-order components:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(ns your-app.lib.reagent
  (:require [reagent.core :as reagent]
            [goog.net.jsloader :as jsl]))

(defn filter-loaded [scripts]
  (reduce (fn [acc [loaded? src]]
            (if (loaded?) acc (conj acc src)))
          []
          scripts))

(defn js-loader
  &amp;quot;Load a supplied list of Javascript files and render a component
   during loading and another component as soon as every script is
   loaded.

   Arg map: {:scripts {loaded-test-fn src}
             :loading component
             :loaded component}&amp;quot;
  [{:keys [scripts loading loaded]}]
  (let [loaded? (reagent/atom false)]
    (reagent/create-class
     {:component-did-mount (fn [_]
                             (let [not-loaded (clj-&amp;gt;js (filter-loaded scripts))]
                               (.then (jsl/loadMany not-loaded)
                                      #(do (js/console.info &amp;quot;Loaded:&amp;quot; not-loaded)
                                           (reset! loaded? true)))))
      :reagent-render (fn [{:keys [scripts loading loaded]}]
                        (if @loaded? loaded loading))})))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here's how you can use it:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;;; payment-form can expect `js/Stripe` to be defined
[js-loader {:scripts {#(exists? js/Stripe) &amp;quot;https://js.stripe.com/v2/&amp;quot;}
            :loading [:div &amp;quot;Loading...&amp;quot;]
            :loaded [payment-form]}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, what can we take away from this besides the specific snippets above?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Higher order components can be very useful to hide away side effects needed for your views to function&lt;/li&gt;&lt;li&gt;They also are perfectly reusable&lt;/li&gt;&lt;li&gt;You can of course also use higher order components to pass things into child components, we don't do that here but if you create some stateful object this may come in handy&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hope this is helpful ‚Äî let me know if you have any thoughts or suggestions :)&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:bdabdf1d-742c-468f-89bb-032986a9d99f</id><title>Props, Children &amp; Component Lifecycle in Reagent</title><published>2016-05-19T00:00:00.00Z</published><updated>2016-05-19T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html" type="text/html" title="Props, Children &amp; Component Lifecycle in Reagent" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/props-children-and-component-lifecycle-in-reagent.html">&lt;h1&gt;Props, Children &amp; Component Lifecycle in Reagent&lt;/h1&gt;&lt;p&gt;Every now and then I come across the situation that I need to compare previous and next props passed to a Reagent component. Every time again I fail to find some docs and figure it out by trial and error.&lt;/p&gt;&lt;h2&gt;Props vs. Children&lt;/h2&gt;&lt;p&gt;In React &lt;strong&gt;everything&lt;/strong&gt; passed to a component is called &lt;code&gt;props&lt;/code&gt;. Children passed to components are passed as &lt;code&gt;props.children&lt;/code&gt;. In Reagent things are a bit different and Reagent‚Äôs hiccup syntax doesn‚Äôt explicitly separate the two:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;;; configuration and one child
[popup {:style :alert} [delete-confirmation]]
;; two children
[popup [alert-icon] [delete-confirmation]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;Popup style=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;DeleteConfirmation&amp;gt;&amp;lt;/Popup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In React it is well-defined where you can access the &lt;code&gt;style&lt;/code&gt; parameter (&lt;code&gt;props.style&lt;/code&gt;) and how you can access the passed children (&lt;code&gt;props.children&lt;/code&gt;). &lt;/p&gt;&lt;p&gt;In Reagent things are a bit different: you have a function definition which takes a number of arguments which you can just refer to in the same way you can refer to any other function parameter. This makes thinking in functions a lot easier but also overshadows some of the underlying React behaviour. &lt;/p&gt;&lt;p&gt;In a lifecycle handler like &lt;code&gt;:component-did-update&lt;/code&gt; accessing component arguments via the symbol they‚Äôve been given in the functions argument vector doesn‚Äôt work:&lt;/p&gt;&lt;p&gt;The moment you define components that are not simple render functions (remember those &lt;a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components"&gt;Form-2 and Form-3&lt;/a&gt; components?) all updates will pass their arguments to the components render function. &lt;/p&gt;&lt;p&gt;The moment you render a component that has been created via &lt;code&gt;reagent.core/create-class&lt;/code&gt; all updates will pass their arguments to the &lt;code&gt;:reagent-render&lt;/code&gt; function, potentially triggering a re-render. The function that returned the result of &lt;code&gt;create-class&lt;/code&gt; is only ever called once at the time of mounting the component ‚Äî your top-level &lt;code&gt;defn&lt;/code&gt; returns a component instead of being a render function itself. This is also &lt;a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-2--a-function-returning-a-function"&gt;why you need to repeat the arguments in the &lt;code&gt;:reagent-render&lt;/code&gt; arguments&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Props in Lifecycle Handlers&lt;/h2&gt;&lt;p&gt;Now how do we get access to these props in a lifecycle handler? The quick answer is, we use &lt;code&gt;reagent.core/props&lt;/code&gt; ‚Äî obvious, huh?&lt;/p&gt;&lt;p&gt;One peculiarity about the &lt;code&gt;props&lt;/code&gt; function is that it expects the &lt;code&gt;props&lt;/code&gt; data to be the first argument to your function. Also it &lt;strong&gt;has to be a map&lt;/strong&gt; (if it‚Äôs not &lt;code&gt;props&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;If the first argument to your component is not a map all arguments are interpreted as children and can be retrieved via &lt;code&gt;reagent.core/children&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So now we have the props for the current render, how do we access the previous ones? All previously passed arguments are passed to the lifecycle handler. Not as you might think though.&lt;/p&gt;&lt;p&gt;If you have a component that has a signature like this:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(defn my-comp [my-props more] ‚Ä¶)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can access it‚Äôs previously passed arguments like this:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:component-did-update (fn [comp [_ prev-props prev-more]] ‚Ä¶))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;comp&lt;/code&gt; is a reference to the current component. The second argument which is being destructured here contains what we‚Äôre looking for. As far as I understood the first item is the component's constructor. The rest are the previously rendered inputs (again in React they‚Äôre all &lt;code&gt;props&lt;/code&gt;, in Reagent they‚Äôre &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;As you can see you can inspect all previous arguments to a component. The way you access them differs from the default React lifecycle method signatures so hopefully this post helps to clear up some confusion about this stuff. :)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt;Thanks to Jonas Enlund for reading a draft of this post and to Mike Thompson for his excellent Re-frame/Reagent docs.&lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:e2aa0cae-c4ce-42c0-9052-f1b001e51c0e</id><title>Om/Next Reading List</title><published>2015-11-03T00:00:00.00Z</published><updated>2015-11-03T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/om-next-reading-list.html" type="text/html" title="Om/Next Reading List" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/om-next-reading-list.html">&lt;h1&gt;Om/Next Reading List&lt;/h1&gt;&lt;p&gt;A small dump of things I read to learn more about Om/Next. Most of these I stumbled upon while lurking in #om on the &lt;a href="http://clojurians.net/"&gt;Clojurians Slack&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://facebook.github.io/relay/docs/thinking-in-relay.html"&gt;Thinking in Relay&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is Facebook's high level overview for Relay. It explains the reasoning for colocating queries and how data masking allows developers to write components that are not coupled to their location in the UI tree.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/omcljs/om/wiki/Quick-Start-%28om.next%29"&gt;Om/Next Quick Start&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the official Om/Next quick start tutorial. It guides you through building a basic application with Om/Next and introduces the basic API for queries and mutations. After reading this you should have a rough idea what's being talked about in the next two reads.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://medium.com/@kovasb/om-next-the-reconciler-af26f02a6fb4"&gt;Om/Next The Reconciler&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Kovas Boguta who previously gave an Om/Next workshop with David Nolen wrote this introduction to the Om/Next reconciler. It covers the architectural role of the reconciler managing application state and communicating it to components. The reconciler also acts as an indexer of all components and, using their queries to build a depdency graph, knows when to update which components.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/awkay/om/wiki/Om-Next-Overview"&gt;Om/Next Overview&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Written by Tony Kay this overview covers many practical aspects of writing queries and mutations. Before it goes into the nitty gritty details howvever there is another short &lt;em&gt;Problem ‚Üí Solution&lt;/em&gt; section that nicely describes the concepts in Relay and Om/Next in prose.&lt;/p&gt;&lt;p&gt;Now put all those links into Instapaper/Pocket &amp;amp; enjoy reading!&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:a658e901-04ec-4ff4-a2d5-c8c72221e3e7</id><title>Parameterizing ClojureScript Builds</title><published>2015-08-11T00:00:00.00Z</published><updated>2015-08-11T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/parameterizing-clojurescript-builds.html" type="text/html" title="Parameterizing ClojureScript Builds" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/parameterizing-clojurescript-builds.html">&lt;h1&gt;Parameterizing ClojureScript Builds&lt;/h1&gt;&lt;p&gt;Just like with most server side software we often want to make minor changes to the behaviour of the code depending on the environment it's run in. This post highlights language and compiler features of ClojureScript making parameterized builds easy peasy.&lt;/p&gt;&lt;p&gt;On servers environment variables are a go-to solution to set things like a database URI. In ClojureScript we don't have access to those. You can work around that with macros and emit code based on environment variables but this requires additional code and separate tools.&lt;/p&gt;&lt;p&gt;With ClojureScript 1.7.48 (&lt;strong&gt;Update:&lt;/strong&gt; There was a bug in 1.7.48 &lt;code&gt;goog-define&lt;/code&gt;. Use 1.7.107 instead.) a new macro &lt;code&gt;goog-define&lt;/code&gt; has been added which allows build customization at compile time using plain compiler options. Let's walk through an example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(ns your.app)
(goog-define api-uri &amp;quot;http://your.api.com&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;goog-define&lt;/code&gt; emits code that looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/** @define {string} */
goog.define(&amp;quot;your.app.api_uri&amp;quot;,&amp;quot;http://your.api.com&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;goog.define&lt;/code&gt; function from Closure's standard library plus the JSDoc &lt;code&gt;@define&lt;/code&gt; annotation tell the Closure compiler that &lt;code&gt;your.app.api_uri&lt;/code&gt; is a constant that can be overridden at compile time.  To do so you just need to pass the appropriate &lt;code&gt;:closure-defines&lt;/code&gt; compiler option:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:closure-defines {'your.app/api-uri &amp;quot;http://your-dev.api.com&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using Leinigen quoting is implicit so there is no quote   necessary before the symbol.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sometimes for debugging you may want to pass the Closure define as a string. If you decide to do so make sure it matches the string in the &lt;code&gt;goog.define&lt;/code&gt; call in your emitted Javascript (i.e. account for name mangling).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt; Prior to 1.7.48 you could annotate things with &lt;code&gt;@define&lt;/code&gt; but without using &lt;code&gt;goog.define&lt;/code&gt; overriding those defines is not possible when using optimizations &lt;code&gt;:none&lt;/code&gt; effectively making them much less useful. &lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Under the hood&lt;/h3&gt;&lt;p&gt;When compiling with &lt;code&gt;:advanced&lt;/code&gt; optimizations the Closure compiler will automatically replace all occurrences of your defined constants with their respective values. If this leads to unreachable branches in your code they will be removed as &lt;a href="https://developers.google.com/closure/compiler/docs/compilation_levels?hl=en#advanced_optimizations"&gt;dead code&lt;/a&gt; by the Closure compiler. Very handy to elide things like logging!&lt;/p&gt;&lt;p&gt;Without any optimizations (&lt;code&gt;:none&lt;/code&gt;) &lt;code&gt;goog.define&lt;/code&gt; makes sure the right value is used. There are two global variables it takes into account for that: &lt;code&gt;CLOSURE_UNCOMPILED_DEFINES&lt;/code&gt; and &lt;code&gt;CLOSURE_DEFINES&lt;/code&gt;. When you override the default value using &lt;code&gt;:closure-defines&lt;/code&gt; the ClojureScript compiler prepends &lt;code&gt;CLOSURE_UNCOMPILED_DEFINES&lt;/code&gt; with your overridden define to your build causing &lt;code&gt;goog.define&lt;/code&gt; to use the value in there instead of the default value you defined in your source files.&lt;/p&gt;&lt;p&gt;For details see &lt;a href="https://github.com/google/closure-library/blob/master/closure/goog/base.js#L147-L172"&gt;the source of goog.define&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:3264b651-0aac-4e62-8751-77b88828f856</id><title>ClojureBridge Berlin</title><published>2015-07-24T00:00:00.00Z</published><updated>2015-07-24T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/clojurebridge-berlin.html" type="text/html" title="ClojureBridge Berlin" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/clojurebridge-berlin.html">&lt;h1&gt;ClojureBridge Berlin&lt;/h1&gt;&lt;p&gt;About two weeks ago something awesome happened: the very first ClojureBridge workshop in Berlin. After months of planning things finally got real.&lt;/p&gt;&lt;p&gt;&lt;img alt="ClojureBridge Berlin in it's entirety." src="/images/clojurebridge-group-picture.jpg"&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; ClojureBridge aims to increase diversity within the Clojure  community by offering free, beginner-friendly Clojure programming  workshops for women. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Many of you probably got the &lt;em&gt;&amp;quot;news&amp;quot;&lt;/em&gt;: there's a lack of diversity in programming communities. Many communities acknowledge this and have created initiatives to fix it. The Ruby community has RailsBridge (and more) and other communties equally do their part in improving our industries diversity situation. Inspired by RailsBridge the Clojure community established ClojureBridge and has organized more than 20 workshops worldwide since.&lt;/p&gt;&lt;h3&gt;Why Diversity?&lt;/h3&gt;&lt;p&gt;There are &lt;a href="http://www.ncwit.org/sites/default/files/resources/impactgenderdiversitytechbusinessperformance_print.pdf"&gt;endless amounts&lt;/a&gt; &lt;a href="http://newsoffice.mit.edu/2014/workplace-diversity-can-help-bottom-line-1007"&gt;of research&lt;/a&gt; why diversity is desirable but one of the reasons that seems most intuitive to me is that software is, after all, for humans. If we want to make great software for everyone then it can only be made by all of us and not by one priviliged monoculture.&lt;/p&gt;&lt;h3&gt;ClojureBridge Berlin&lt;/h3&gt;&lt;p&gt;ClojureBridge workshops consist of one evening installing required software (Friday) and a full day of actually learning things (Saturday). Besides some problems with our pizza delivery both days went really well. We had great vegan and vegetarian lunch on Saturday, fun ClojureBridge cupcakes and after the coffee machine broke on Friday people brought lots of coffee making equipment to the event on Saturday. You could say we had a little &lt;a href="https://en.wikipedia.org/wiki/Third_wave_of_coffee"&gt;third wave coffee&lt;/a&gt; workshop as well.&lt;/p&gt;&lt;p&gt;&lt;img alt="We got some sweet cupcakes!" src="/images/clojurebridge-cupcakes.jpg"&gt;&lt;/p&gt;&lt;p&gt;On Saturday we initially had 2-3 coaches that &amp;quot;didn't have a job&amp;quot; and we were afraid they might feel superflous but the need for some additional help quickly arised when some learners got ahead of the rest of their group. In the end we were very happy that we had the flexibility of not having assigned all coaches to groups. (We still had teaching assistants.)&lt;/p&gt;&lt;h3&gt;Results&lt;/h3&gt;&lt;p&gt;At the end of the event we had a fantastic demo time. A great amount of learners showed their Quil creations, from an Santa Claus to stroboscopic rainbow animations. It was great to see how in the beginning everyone was shy to show their work but as more people did others felt encouraged to do the same.&lt;/p&gt;&lt;h3&gt;Takeaways&lt;/h3&gt;&lt;p&gt;This was the first time we organized such workshop in Berlin. We were lucky to be a big team of organizers (six people) which allowed us to distribute the work.&lt;/p&gt;&lt;p&gt;The feedback we got during and after the workshop has been very positive. About a third of the attendees have registered interest in joining project groups to keep learning. Obviously the more the better but even ten people is a nice outcome overall.&lt;/p&gt;&lt;h3&gt;Thanks&lt;/h3&gt;&lt;p&gt;I'd like to take the opportunity to thank all of our coaches: Nils, Sean, Paulus, Jan, Johannes, Ben, Franziska, Luca, Txus, Kofi, Torsten, Tibor, Thomas, Stephan, Oskar, Kai &amp;amp; Matt thank you so much for being part of this. &lt;strong&gt;None of it would have happened without you!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Also I'd like to thank my fellow organizers for pushing through the finish line together and for just being an overall awesome bunch. Thanks Bettina, Malwine, Arne, Jelle &amp;amp; Nicola.&lt;/p&gt;&lt;p&gt;Last but not least I'd like to thank the companies that enabled ClojureBridge Berlin: Wunderlist, SoundCloud, GitHub, InnoQ, TicketSolve, Babbel &amp;amp; DaWanda. A special thank you in this regard to Andrei, who has done an exceptional job at hosting the event at Wunderlist!&lt;/p&gt;&lt;p&gt;&lt;img alt="ClojureBridge Berlin T-Shirts" src="/images/clojurebridge-shirts.jpg"&gt;&lt;/p&gt;&lt;p&gt;If you'd like to be informed about upcoming workshops, follow &lt;a href="https://twitter.com/clojureberlin"&gt;@ClojureBerlin&lt;/a&gt; on Twitter. If you don't have Twitter you can also  &lt;a href="mailto:martinklepsch@googlemail.com"&gt;send me an email&lt;/a&gt; and I'll make  sure you'll be notified :-)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt; &lt;p&gt;Image credits (in order):  &lt;a href="https://twitter.com/bumbledebee"&gt;@bumbledebee&lt;/a&gt;,  &lt;a href="https://twitter.com/codebeige/status/619804392284422144"&gt;@codebeige&lt;/a&gt;,  &lt;a href="https://twitter.com/ClojureBerlin/status/619890238584963072"&gt;@malwine&lt;/a&gt;.&lt;/p&gt; &lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:47b430b8-3e76-48c5-a68e-a12fe88b2e4e</id><title>Managing Local and Project-wide Development Parameters in Leiningen</title><published>2015-06-03T00:00:00.00Z</published><updated>2015-06-03T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html" type="text/html" title="Managing Local and Project-wide Development Parameters in Leiningen" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/managing-local-and-project-wide-development-parameters-in-leiningen.html">&lt;h1&gt;Managing Local and Project-wide Development Parameters in Leiningen&lt;/h1&gt;&lt;p&gt;Little tip. Long headline.&lt;/p&gt;&lt;p&gt;In any project there are often settings that are specific to the context the project is run in (think of an &lt;code&gt;environment&lt;/code&gt; parameter) and then there are parameters that are specifc to the developer/workstation they're run on. This is a guide to separate these two things nicely in Leiningen-based Clojure projects.&lt;/p&gt;&lt;p&gt;So you have a project setup that uses &lt;a href="https://github.com/weavejester/environ"&gt;environ&lt;/a&gt; to determine the context the project is run in (&lt;code&gt;development&lt;/code&gt; vs. &lt;code&gt;production&lt;/code&gt;).&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;; in project.clj:
(defproject your-app &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  ; ...
  :profiles {:dev {:env {:environment &amp;quot;development&amp;quot;}}})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you also want to use environment variables (or anything else thats supported by environ) to store AWS credentials to access Amazon S3. You don't want to commit these credentials into version control, therefore you can't add them to &lt;code&gt;project.clj&lt;/code&gt;. The way to go is to create a file &lt;code&gt;profiles.clj&lt;/code&gt; in your project to store workstation specific information. Naively this could look something like this&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:dev {:env {:aws-access-key &amp;quot;abc&amp;quot;
             :aws-secret-key &amp;quot;xyz&amp;quot;
             :s3-bucket &amp;quot;mybucket&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you run your project with this &lt;code&gt;profiles.clj&lt;/code&gt; you will be able to access your AWS credentials. You might also notice that `(environ/env :environment)` is nil. &lt;strong&gt;That wasn't intended.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The problem here is that Leiningen will override keys in profiles defined in &lt;code&gt;project.clj&lt;/code&gt; if &lt;strong&gt;the same profile&lt;/strong&gt; has also been defined in &lt;code&gt;profiles.clj&lt;/code&gt;.  To recursively merge Leiningen profiles combine them like so:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;;; in project.clj:
(defproject your-app &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  ;; ...
  :profiles {:dev [:project/dev :local/dev]
             :project/dev {:env {:environment &amp;quot;development&amp;quot;}}})

;; in profiles.clj
{:local/dev {:env {:secret-key &amp;quot;xyz&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now both, &lt;code&gt;:envrionment&lt;/code&gt; and &lt;code&gt;:secret-key&lt;/code&gt; should be defined when you retrieve them using environ.&lt;/p&gt;&lt;p&gt;&lt;em&gt;This is largely inspired by James Reeves' &lt;a href="https://github.com/weavejester/duct"&gt;duct&lt;/a&gt; Leiningen template.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:915cc2e8-d190-4d54-b746-0e1c34dff835</id><title>Formal Methods at Amazon</title><published>2015-04-10T00:00:00.00Z</published><updated>2015-04-10T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/formal-methods-at-amazon.html" type="text/html" title="Formal Methods at Amazon" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/formal-methods-at-amazon.html">&lt;h1&gt;Formal Methods at Amazon&lt;/h1&gt;&lt;p&gt;I saw this paper being mentioned again and again in my Twitter feed. Basically not even knowing what &amp;quot;formal methods&amp;quot; really means I was intrigued by the claim that it's easy to read. And it has been.&lt;/p&gt;&lt;p&gt;The paper describes how Amazon used a specification language to describe designs of complex concurrent fault tolerant systems finding bugs and verifying changes in the process.&lt;/p&gt;&lt;p&gt;The specification language (TLA+) is not focus of the paper, rather the authors concentrate on describing benefits, problems and the path of adopting formal specification of system designs in an engineering organization.&lt;/p&gt;&lt;p&gt;TLA+, stands for &lt;em&gt;Temporal Logic of Actions&lt;/em&gt; and &lt;a href="http://research.microsoft.com/en-us/um/people/lamport/tla/tla-intro.html"&gt;&amp;quot;is especially well suited for writing high-level specifications of concurrent and distributed systems.&amp;quot;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Reading how they use it at Amazon I'm under the impression that it works very similar to &lt;a href="http://blog.8thlight.com/connor-mendenhall/2013/10/31/check-your-work.html"&gt;generative testing&lt;/a&gt; dumping a ton of basically random (according to some rules) data into a system and checking if the desired properties are maintained. Often the term &lt;em&gt;&amp;quot;model checker&amp;quot;&lt;/em&gt; is used.&lt;/p&gt;&lt;p&gt;Download the &lt;a href="http://research.microsoft.com/en-us/um/people/lamport/tla/amazon.html"&gt;original paper&lt;/a&gt; or a copy of it &lt;a href="/images/formal-methods-amazon.pdf"&gt;with some passages highlighted&lt;/a&gt; that I found particulary interesting.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:92c021b4-d645-48fd-aeb5-333305edfdb5</id><title>(lisp keymap)</title><published>2015-02-05T00:00:00.00Z</published><updated>2015-02-05T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/lisp-keymap.html" type="text/html" title="(lisp keymap)" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/lisp-keymap.html">&lt;h1&gt;(lisp keymap)&lt;/h1&gt;&lt;p&gt;A while back I wanted to setup hotkeys for the various apps I use. Mostly because I was annoyed by the cognitive effort you need to make to figure out how often you need to press &lt;code&gt;Alt + Tab&lt;/code&gt; exactly to get to the app you want.&lt;/p&gt;&lt;p&gt;It seemed like a good idea to use Capslock as a modifier key. This way I could be sure I wouldn't override any other keybindings. Figuring out how to do this I stumpled upon an excellent post by Steve Losh &lt;a href="http://stevelosh.com/blog/2012/10/a-modern-space-cadet/"&gt;&amp;quot;A Modern Space Cadet&amp;quot;&lt;/a&gt;. It's described in detail how to set Capslock to &lt;code&gt;Hyper&lt;/code&gt; - a fifth modifier key. I then created bindings like &lt;code&gt;Hyper + S&lt;/code&gt; which will focus Safari etc. Exactly what I was looking for.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Then I found something in his post I wasn't looking for&lt;/strong&gt;: instructions to map my shift keys to parentheses. It sounded crazy at first but doing mostly LISP-y stuff these days I tried it anyways.&lt;/p&gt;&lt;p&gt;Now I wouldn't want to live without it anymore. It's just so much easier than &lt;code&gt;Shift + {9,0}&lt;/code&gt;. Also the Shift keys still work as they do usually when pressed in combination with other keys.&lt;/p&gt;&lt;p&gt;A few days ago I was typing some stuff at a collegues computer and it immediately felt cumbersome when having to type a parenthesis.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt; PS. Here are Steve Losh's original &lt;a href="http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses"&gt;OS X Instructions&lt;/a&gt;.  (What's KeyRemap4MacBook in this post is now &lt;a href="https://pqrs.org/osx/karabiner/index.html.en"&gt;Karabiner&lt;/a&gt;.) &lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:99353e70-0080-454a-825d-bb85f8398ae4</id><title>CLJSJS - Use Javascript Libraries in Clojurescript With Ease</title><published>2015-01-05T00:00:00.00Z</published><updated>2015-01-05T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html" type="text/html" title="CLJSJS - Use Javascript Libraries in Clojurescript With Ease" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/cljsjs-use-javascript-libraries-in-clojurescript.html">&lt;h1&gt;CLJSJS - Use Javascript Libraries in Clojurescript With Ease&lt;/h1&gt;&lt;p&gt;In Clojure, Java interoperability or ‚Äúinterop‚Äù is a core feature. In Clojurescript, interop with Javascript libraries does not work out-of-the-box across optimization modes. Extern files or ‚Äúexterns‚Äù required for advanced optimizations are often hard to find.&lt;/p&gt;&lt;p&gt;To fix this a few newly found friends and I created &lt;strong&gt;&lt;a href="http://cljsjs.github.io"&gt;CLJSJS&lt;/a&gt;&lt;/strong&gt;. CLJSJS is an effort to package Javascript libraries with their respective extern files and provide tools to integrate them into your project.&lt;/p&gt;&lt;p&gt;My personal hope is that this will make it easier for newcomers to get started with Clojurescript.&lt;/p&gt;&lt;p&gt;Also existing solutions like &lt;code&gt;deps.clj&lt;/code&gt; (&lt;a href="https://groups.google.com/forum/#!msg/clojurescript/LtFMDxc5D00/hMR6BcfMMAMJ"&gt;more here&lt;/a&gt;) only address the problem of Javascript dependencies partially. Maybe CLJSJS can serve as a vehicle to find some &amp;quot;pseudo-standard&amp;quot; for this kind of stuff.&lt;/p&gt;&lt;p&gt;Thanks to Juho Teperi, Micha Niskin &amp;amp; Alan Dipert for their contributions and ideas so far. &lt;strong&gt;Now go and check out the &lt;a href="http://cljsjs.github.io"&gt;project homepage&lt;/a&gt; or jump straight into the &lt;a href="https://github.com/cljsjs/packages"&gt;packages repo&lt;/a&gt; and learn how you can contribute.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Announcement post and discussion on the &lt;a href="https://groups.google.com/forum/#!topic/clojurescript/qhFNVEeNCbc"&gt;Clojurescript mailinglist&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:ae776455-1de4-4ac8-bdda-d84680ed4b6b</id><title>Why Boot is Relevant For The Clojure Ecosystem</title><published>2014-11-06T00:00:00.00Z</published><updated>2014-11-06T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html" type="text/html" title="Why Boot is Relevant For The Clojure Ecosystem" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/why-boot-is-relevant-for-the-clojure-ecosystem.html">&lt;h1&gt;Why Boot is Relevant For The Clojure Ecosystem&lt;/h1&gt;&lt;p&gt;Boot is a build system for Clojure projects. It roughly competes in the same area as Leiningen but Boot's new version brings some interesting features to the table that make it an alternative worth assessing.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt; If you don't know what Boot is I recommend reading this post by one of Boot's authors first: &lt;a href="http://adzerk.com/blog/2014/11/clojurescript-builds-rebooted/"&gt;Clojurescript Builds, Rebooted&lt;/a&gt;. &lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Compose Build Steps&lt;/h2&gt;&lt;p&gt;If you've used Leiningen for more than packaging jars and uberjars you likely came across plugins like &lt;code&gt;lein-cljsbuild&lt;/code&gt; or &lt;code&gt;lein-garden&lt;/code&gt;, both compile your stuff into a target format (i.e. JS, CSS). Now if you want to run both of these tasks at the same time ‚Äî which you probably want during development ‚Äî you have two options: either you open two terminals and start them separately or you fall back to something like below that you run in a &lt;code&gt;dev&lt;/code&gt; profile (this is how it's done in &lt;a href="https://github.com/plexus/chestnut"&gt;Chestnut&lt;/a&gt;):&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(defn start-garden []
(future
  (print &amp;quot;Starting Garden.\n&amp;quot;)
  (lein/-main [&amp;quot;garden&amp;quot; &amp;quot;auto&amp;quot;])))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now there are issues with both of these options in my opinion. Opening two terminals to initiate your development environment is just not very user friendly and putting code related to building the project into your codebase is boilerplate that unnecessarily can cause trouble by getting outdated.&lt;/p&gt;&lt;p&gt;What Boot allows developers to do is to write small composable tasks. These work somewhat similar to stateful transducers and ring middleware in that you can just combine them with regular function composition.&lt;/p&gt;&lt;h3&gt;A Quick Example&lt;/h3&gt;&lt;p&gt;Playing around with Boot, I tried to write a task. To test this task in an actual project I needed to install it into my local repository (in Leiningen: &lt;code&gt;lein install&lt;/code&gt;).  Knowing that I'd need to reinstall the task constantly as I change it I was looking for something like Leiningen's Checkouts so I don't have to re-install after every change.&lt;/p&gt;&lt;p&gt;Turns out Boot can solve this problem in a very different way that illustrates the composing mechanism nicely. Boot defines a bunch of &lt;a href="https://github.com/boot-clj/boot/blob/master/boot/core/src/boot/task/built_in.clj"&gt;built-in tasks&lt;/a&gt; that help with packaging and installing a jar: &lt;code&gt;pom&lt;/code&gt;, &lt;code&gt;add-src&lt;/code&gt;, &lt;code&gt;jar&lt;/code&gt; &amp;amp; &lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We could call all of these these on the command line as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;boot pom add-src jar install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because we're lazy we'll define it as a task in our project's &lt;code&gt;build.boot&lt;/code&gt; file. (Command-line task and their arguments are symmetric to their Clojure counterparts.)&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(require '[boot.core          :refer [deftask]]
            '[boot.task.built-in :refer [pom add-src jar install]])

(deftask build-jar
  &amp;quot;Build jar and install to local repo.&amp;quot;
  []
  (comp (pom) (add-src) (jar) (install)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now &lt;code&gt;boot build-jar&lt;/code&gt; is roughly equivalent to &lt;code&gt;lein install&lt;/code&gt;. To have any changes directly reflected on our classpath we can just compose our newly written &lt;code&gt;build-jar&lt;/code&gt; task with another task from the repertoire of built-in tasks: &lt;code&gt;watch&lt;/code&gt;. The &lt;code&gt;watch&lt;/code&gt;-task observes the file system for changes and initiates a new build cycle when they occur:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;boot watch build-jar&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that command we just composed our already composed task with another task. &lt;strong&gt;Look at that cohesion!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt;I'm not familiar enough with Leiningen Checkouts to say with confidence if this is identical behavior but for the majority of cases it'll probably work.&lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;There Are Side-Effects Everwhere!&lt;/h2&gt;&lt;p&gt;Is one concern that has been raised about Boot. Leiningen is beautifully declarative. It's one immutable map that describes your whole project. Boot on the other hand looks a bit different.  A usual boot file might contain a bunch of side-effectful functions and in general it's much more a program than it is data.&lt;/p&gt;&lt;p&gt;I understand that this might seem like a step back at first sight, in fact I looked at it with confusion as well. There are some problems with Leiningen though that are probably hard to work out in Leiningen's declarative manner (think back to &lt;a href="https://github.com/technomancy/leiningen/issues/1752"&gt;running multiple &lt;code&gt;lein X auto&lt;/code&gt; commands&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Looking at Boot's code it becomes apparent that the authors spent a great deal of time on isolating the side effects that might occur in various build steps. I recommend reading the &lt;a href="https://news.ycombinator.com/item?id=8553189"&gt;comments on this Hacker News thread&lt;/a&gt; for more information on that.&lt;/p&gt;&lt;h2&gt;When To Use Boot, When To Use Leiningen&lt;/h2&gt;&lt;p&gt;Boot is a build tool. That said it's task composition features only get to shine when multiple build steps are involved. If you're developing a library I'm really not going to try to convince you to switch to Boot.  Leiningen works great for that and is, I'd assume, more stable than Boot.&lt;/p&gt;&lt;p&gt;If you however develop an application that requires various build steps (like Clojurescript, Garden, live reloading, browser-repl) you should totally check out Boot. There are tasks for all of the above mentioned: &lt;a href="https://github.com/adzerk/boot-cljs"&gt;Clojurescript&lt;/a&gt;, &lt;a href="https://github.com/adzerk/boot-cljs-repl"&gt;Clojurescript REPL&lt;/a&gt;, &lt;a href="https://github.com/martinklepsch/boot-garden"&gt;Garden&lt;/a&gt;, &lt;a href="https://github.com/adzerk/boot-reload"&gt;live reloading&lt;/a&gt;. I wrote the Garden task and writing tasks is not hard once you have a basic understanding of Boot.&lt;/p&gt;&lt;p&gt;If you need help or have questions join the &lt;a href="http://webchat.freenode.net/?channels=hoplon"&gt;#hoplon channel on freenode IRC&lt;/a&gt;. I'll try to help and if I can't Alan or Micha, the authors of Boot, probably can.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:8b07ff10-d213-41b5-b388-5cc9dbc17bfd</id><title>S3-Beam ‚Äî Direct Upload to S3 with Clojure &amp; Clojurescript</title><published>2014-10-21T00:00:00.00Z</published><updated>2014-10-21T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html" type="text/html" title="S3-Beam ‚Äî Direct Upload to S3 with Clojure &amp; Clojurescript" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/s3-beam-direct-upload-to-s3-with-clojure-and-clojurescript.html">&lt;h1&gt;S3-Beam ‚Äî Direct Upload to S3 with Clojure &amp; Clojurescript&lt;/h1&gt;&lt;p&gt;In a &lt;a href="http://www.martinklepsch.org/posts/using-coreasync-and-transducers-for-direct-s3-upload.html"&gt;previous post&lt;/a&gt; I described how to upload files from the browser directly to S3 using Clojure and Clojurescript. I now packaged this up into a small (tiny, actually) library: &lt;a href="https://github.com/martinklepsch/s3-beam"&gt;s3-beam&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;An interesting note on what changed to the process described in the earlier post: the code now uses &lt;code&gt;pipeline-async&lt;/code&gt; instead of transducers. After some discussion with Timothy Baldridge this seemed more appropriate even though there are some aspects about the transducer approach that I liked but didn't get to explore further.&lt;/p&gt;&lt;p&gt;Maybe in an upcoming version it will make sense to reevaluate that decision. If you have any questions, feedback or suggestions I'm happy to hear them!&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:15184838-af2e-4ea1-b9a5-57f1ed52cf77</id><title>Patalyze &amp;mdash; An Experiment Exploring Publicly Available Patent Data</title><published>2014-10-02T00:00:00.00Z</published><updated>2014-10-02T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/patalyze-an-experiment-exploring-patent-data.html" type="text/html" title="Patalyze &amp;mdash; An Experiment Exploring Publicly Available Patent Data" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/patalyze-an-experiment-exploring-patent-data.html">&lt;h1&gt;Patalyze &amp;mdash; An Experiment Exploring Publicly Available Patent Data&lt;/h1&gt;&lt;p&gt;For a few months now I've been working on and off on a little &amp;quot;data-project&amp;quot; analyzing patents published by the US Patent &amp;amp; Trademark Office. Looking at the time I spent on this until now I think I should start talking about it instead of just hacking away evening after evening.&lt;/p&gt;&lt;p&gt;It started with a simple observation: there are companies like Apple that sometimes collaborate with smaller companies building a small part of Apple's next device. A contract like this usually gives the stock of the small company a significant boost. What if you could foresee those relationships by finding patents that employees from Apple and from the small company filed?&lt;/p&gt;&lt;h2&gt;An API for patent data?&lt;/h2&gt;&lt;p&gt;Obviously this isn't going to change the world for the better but just the possibility that such predictions or at least indications are possible kept me curious to look out for APIs offering patent data. I did not find much. So thinking about something small that could be &amp;quot;delivered&amp;quot; I thought a patent API would be great. To build the dataset I'd parse the archives provided on Google's &lt;a href="http://www.google.com/googlebooks/uspto-patents.html"&gt;USPTO Bulk downloads&lt;/a&gt; page.&lt;/p&gt;&lt;p&gt;I later found out about &lt;a href="http://enigma.io"&gt;Enigma&lt;/a&gt; and some offerings by &lt;a href="http://ip.thomsonreuters.com"&gt;Thomson Reuters&lt;/a&gt;. The prices are high and the sort of analysis we wanted to do would have been hard with inflexible query APIs.&lt;/p&gt;&lt;p&gt;For what we wanted to do we only required a small subset of the data a patent contains. We needed the organization, it's authors, the title and description, filing- and publication dates and some identifiers. With such a reduced amount of data that's almost only useful in combination with the complete data set I discarded the plan to build an API. Maybe it will make sense to publish reduced and more easily parseable versions of the archives Google provides at some point. Let me know if you would be interested in that.&lt;/p&gt;&lt;h2&gt;What's next&lt;/h2&gt;&lt;p&gt;So far I've built up a system to parse, store and query some 4 million patents that have been filed at the USPTO since beginning of 2001. While it sure would be great to make some money off of the work I've done so far I'm not sure what product could be built from the technology I created so far. Maybe I could sell the dataset but the number of potential customers is probably small and in general I'd much more prefer to make it public. I'll continue to explore the possibilities with regards to that.&lt;/p&gt;&lt;p&gt;For now I want to explore the data and share the results of this exploration. I setup a small site that I'd like to use as home for any further work on this. By now it only has a newsletter signup form (just like any other landing page) but I hope to share some interesting analysis with the subscribers to the list every now and then in the near future. Check it out at &lt;strong&gt;&lt;a href="http://www.patalyze.co"&gt;patalyze.co&lt;/a&gt;&lt;/strong&gt;.  There even is a small chart showing some data.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:1f571433-ffa3-4d3b-9c5d-6220cf9ebe54</id><title>Running a Clojure Uberjar inside Docker</title><published>2014-09-11T00:00:00.00Z</published><updated>2014-09-11T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/running-a-clojure-uberjar-inside-docker.html" type="text/html" title="Running a Clojure Uberjar inside Docker" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/running-a-clojure-uberjar-inside-docker.html">&lt;h1&gt;Running a Clojure Uberjar inside Docker&lt;/h1&gt;&lt;p&gt;For a sideproject I wanted to deploy a Clojure uberjar on a remote server using Docker. I imagined that to be fairly straight foward but there are some caveats you need to be aware of.&lt;/p&gt;&lt;p&gt;Naively my first attempt looked somewhat like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;FROM dockerfile/java
ADD https://example.com/app-standalone.jar /
EXPOSE 8080
ENTRYPOINT [ &amp;quot;java&amp;quot;, &amp;quot;-verbose&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/app-standalone.jar&amp;quot; ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I expected this to work. But it didn't. Instead it just printed the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[Opened /usr/lib/jvm/java-7-oracle/jre/lib/rt.jar]
# this can vary depending on what JRE you're using&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that has only been printed because I added &lt;code&gt;-verbose&lt;/code&gt; when starting the jar. So if you're not running the jar verbosely it'll fail without any output. Took me quite some time to figure that out.&lt;/p&gt;&lt;p&gt;As it turns out the &lt;code&gt;dockerfile/java&lt;/code&gt; image contains a &lt;code&gt;WORKDIR&lt;/code&gt; command that somehow breaks my &lt;code&gt;java&lt;/code&gt; invocation, even though it is using absolute paths everywhere.&lt;/p&gt;&lt;h2&gt;What worked for me&lt;/h2&gt;&lt;p&gt;I ended up splitting the procedure into two files in a way that allowed me to always get the most recent jar when starting the docker container.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; basically just adds a small script to the container that downloads and starts a jar it downloads from somewhere (S3 in my case).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;FROM dockerfile/java
ADD fetch-and-run.sh /
EXPOSE 42042
EXPOSE 3000
CMD [&amp;quot;/bin/sh&amp;quot;, &amp;quot;/fetch-and-run.sh&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here is &lt;code&gt;fetch-and-run.sh&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#! /bin/sh
wget https://s3.amazonaws.com/example/yo-standalone.jar -O /yo-standalone.jar;
java -verbose -jar /yo-standalone.jar&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when you build a new image from that Dockerfile it adds the &lt;code&gt;fetch-and-run.sh&lt;/code&gt; script to the image's filesystem. Note that the jar is not part of the image but that it will be downloaded whenever a new container is being started from the image. That way a simple restart will always fetch the most recent version of the jar. In some scenarios it might become confusing to not have precise deployment tracking but in my case it turned out much more convenient than going through the process of destroying the container, deleting the image, creating a new image and starting up a new container.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:a0c71769-4de2-476d-9453-2a00ccd527a5</id><title>Using core.async and Transducers to upload files from the browser to S3</title><published>2014-09-04T00:00:00.00Z</published><updated>2014-09-04T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/using-coreasync-and-transducers-for-direct-s3-upload.html" type="text/html" title="Using core.async and Transducers to upload files from the browser to S3" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/using-coreasync-and-transducers-for-direct-s3-upload.html">&lt;h1&gt;Using core.async and Transducers to upload files from the browser to S3&lt;/h1&gt;&lt;p&gt;In a project I'm working on we needed to enable users to upload media content. In many scenarios it makes sense to upload to S3 directly from the browser instead of routing it through a server. If you're hosting on Heroku you need to do this anyways. After digging a bit into &lt;a href="https://github.com/clojure/core.async"&gt;&lt;code&gt;core.async&lt;/code&gt;&lt;/a&gt; this seemed like a neat little excuse to give Clojure's new transducers a go.&lt;/p&gt;&lt;h2&gt;The Problem&lt;/h2&gt;&lt;p&gt;To upload files directly to S3 without any server in between you need to do a couple of things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Enable Cross-Origin Resource Sharing (CORS) on your bucket&lt;/li&gt;&lt;li&gt;Provide special parameters in the request that authorize the upload&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Enabling CORS is fairly straightforward, just follow &lt;a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html"&gt;the documentation&lt;/a&gt; provided by AWS. The aforementioned special parameters are based on your AWS credentials, the key you want to save the file to, it's content-type and &lt;a href="http://aws.amazon.com/articles/1434/"&gt;a few other things&lt;/a&gt;. Because you don't want to store your credentials in client-side code the parameters need to be computed on a server.&lt;/p&gt;&lt;p&gt;We end up with the following procedure to upload a file to S3:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get a Javascript File object from the user&lt;/li&gt;&lt;li&gt;Retrieve special parameters for post request from server&lt;/li&gt;&lt;li&gt;Post &lt;strong&gt;directly from the browser&lt;/strong&gt; to S3&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Server-side code&lt;/h2&gt;&lt;p&gt;I won't go into detail here, but here's &lt;a href="https://gist.github.com/martinklepsch/0c6b40f45a415046f0fe"&gt;some rough Clojure code&lt;/a&gt; illustrating the construction of the special parameters and how they're sent to the client.&lt;/p&gt;&lt;h2&gt;Client-side: Transducers and core.async&lt;/h2&gt;&lt;p&gt;As we see the process involves multiple asynchronous steps: &lt;img alt="" src="/images/s3-direct.png"&gt;&lt;/p&gt;&lt;p&gt;To wrap all that up into a useful minimal API that hides all the complex back and forth happening until a file is uploaded core.async channels and transducers turned out very useful:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defn s3-upload [report-chan]
  (let [upload-files (map #(upload-file % report-chan))
        upload-chan  (chan 10 upload-files)
        sign-files   (map #(sign-file % upload-chan))
        signing-chan (chan 10 sign-files)]&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;    (go (while true
          (let [[v ch] (alts! [signing-chan upload-chan])]
            ; that's not really required but has been useful
            (log v))))
    signing-chan))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function takes one channel as argument where it will &lt;code&gt;put!&lt;/code&gt; the result of the S3 request. You can take a look at the &lt;code&gt;upload-file&lt;/code&gt; and &lt;code&gt;sign-file&lt;/code&gt; functions &lt;a href="https://gist.github.com/martinklepsch/96e548d9595e111d70ce"&gt;in this gist&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;So what's happening here?&lt;/strong&gt; We use a channel for each step of the process: &lt;code&gt;signing-chan&lt;/code&gt; and &lt;code&gt;upload-chan&lt;/code&gt;. Both of those channels have an associated transducer. In this case you can think best of a transducer as a function that's applied to each item in a channel on it's way through the channel. I initially trapped upon the fact that the transducing function is only applied when the element is being taken from the channel as well. Just putting things into a channel doesn't trigger the execution of the transducing function.&lt;/p&gt;&lt;p&gt;&lt;code&gt;signing-chan&lt;/code&gt;'s transducer initiates the request to sign the File object that has been put into the channel. The second argument to the &lt;code&gt;sign-file&lt;/code&gt; function is a channel where the AJAX callback will put it's result. Similary &lt;code&gt;upload-chan&lt;/code&gt;'s transducer initiates the upload to S3 based on information that has been put into the channel. A callback will then put S3's response into the supplied &lt;code&gt;report-chan&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The last line returns the channel that can be used to initiate a new upload.&lt;/p&gt;&lt;h2&gt;Using this&lt;/h2&gt;&lt;p&gt;Putting this into a library and opening it up for other people to use isn't overly complicated, the exposed API is actually very simple. Imagine an &lt;a href="https://github.com/swannodette/om"&gt;Om&lt;/a&gt; component &lt;code&gt;upload-form&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defn queue-file [e owner {:keys [upload-queue]}]
  (put! upload-queue (first (array-seq (.. e -target -files)))))&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(defcomponent upload-form [text owner]
  (init-state [_]
    (let [rc (chan 10)]
      {:upload-queue (s3-upload rc)
       :report-chan rc}))
  (did-mount [_]
    (let [{:keys [report-chan]} (om/get-state owner)]
      (go (while true (log (&amp;lt;! report-chan))))))
  (render-state [this state]
    (dom/form
     (dom/input {:type &amp;quot;file&amp;quot; :name &amp;quot;file&amp;quot;
                 :on-change #(queue-file % owner state)} nil))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I really like how simple this is. You put a file into a channel and whenever it's done you take the result from another channel. &lt;code&gt;s3-upload&lt;/code&gt; could take additional options like logging functions or a custom URL to retrieve the special parameters required to authorize the request to S3.&lt;/p&gt;&lt;p&gt;This has been the first time I've been doing something useful with core.async and, probably less surprisingly, the first time I played with transducers. I assume many things can be done better and I still need to look into some things like how to properly shut down the &lt;code&gt;go&lt;/code&gt; blocks. &lt;strong&gt;Any feedback is welcome!&lt;/strong&gt; &lt;a href="https://twitter.com/martinklepsch"&gt;Tweet&lt;/a&gt; or &lt;a href="mailto://martinklepsch@googlemail.com"&gt;mail&lt;/a&gt; me!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; to Dave Liepmann who let me peek into some code he wrote that did similar things and to Kevin Downey (&lt;em&gt;hiredman&lt;/em&gt;) who helped me understand core.async and transducers by answering my stupid questions in &lt;code&gt;#clojure&lt;/code&gt; on Freenode.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:6d204755-b8a0-4c43-98b2-b592e22970b7</id><title>Emacs &amp; Vim</title><published>2014-07-22T00:00:00.00Z</published><updated>2014-07-22T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/emacs-and-vim.html" type="text/html" title="Emacs &amp; Vim" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/emacs-and-vim.html">&lt;h1&gt;Emacs &amp; Vim&lt;/h1&gt;&lt;p&gt;After using Vim for more than four years my recent contacts with Lisp encouraged me to take another look at Emacs. I used to make jokes about Emacs just as Emacs users about Vim but actually it seems to be a pretty decent piece of software.&lt;/p&gt;&lt;p&gt;Being a Vim user in the Clojure community sometimes feels weird. You are happy with Vim. Running Clojure code with right from the editor works well these days. Still you wonder why all those people you consider smart seem to be so committed to Emacs. So I decided to try it once again.&lt;/p&gt;&lt;h2&gt;Keybindings&lt;/h2&gt;&lt;p&gt;Let's start with a slight rant: I completely do not understand how anyone can use Emacs' default keybindings.  Being a Vim user I obviously have a thing for mode-based editing but Emacs' keybindings are beyond my understanding. Some simple movement commands to illustrate this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Move cursor down one line&lt;ul&gt;&lt;li&gt;Emacs: &lt;code&gt;Ctrl-n&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Vim: &lt;code&gt;j&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Move cursor up one line&lt;ul&gt;&lt;li&gt;Emacs: &lt;code&gt;Ctrl-p&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Vim: &lt;code&gt;k&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Move cursor left one character&lt;ul&gt;&lt;li&gt;Emacs: &lt;code&gt;Ctrl-b&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Vim: &lt;code&gt;h&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Move cursor right one character&lt;ul&gt;&lt;li&gt;Emacs: &lt;code&gt;Ctrl-f&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Vim: &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are the commands recommended in the Emacs tutorial (which you open with &lt;code&gt;Ctrl-h t&lt;/code&gt;). They are mnemonic, what makes them easy to learn‚Äìbut is that really the most important factor to consider for commands you will use hundreds of times a day? I don't think so. I tried to convince myself that it might be worth to get used to Emacs' default keybindings but after some time I gave up and installed &lt;code&gt;evil-mode&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Mode-based Editing with Evil Mode&lt;/h2&gt;&lt;p&gt;In my memory &lt;code&gt;evil-mode&lt;/code&gt; sucked. I was delightfully surprised that it doesn't (anymore?). Evil brings well-done mode based editing to Emacs. As you continue to evolve your Emacs configuration you will most likely install additional packages that bring weird Emacs-style keybindings with them. Since you now have a mode-based editor you can use shorter, easier to remember keybindings to call functions provided by these packages. A useful helper that fits a sweet spot in my Vim-brain is &lt;code&gt;evil-leader&lt;/code&gt; which allows you to setup &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; based keybindings, just like you can do it in Vim:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(evil-leader/set-leader &amp;quot;,&amp;quot;)
(evil-leader/set-key
  &amp;quot;,&amp;quot; 'projectile-find-file)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this I can open a small panel that finds files in my project in a fuzzy way (think Ctrl-p for Vim) hitting &lt;code&gt;,&lt;/code&gt; two times instead of &lt;code&gt;Ctrl-c p f&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Batteries Included&lt;/h2&gt;&lt;p&gt;What I really enjoyed with Emacs was the fact that a package manager comes right with it. After adding a community maintained package repository to your configuration you have access to some 2000 packages covering Git integration, syntax and spell checking, interactive execution of Clojure code and more. This has been added in a the last major update (&lt;code&gt;v24&lt;/code&gt;) after being a community project for some years.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Vim's lack of support for async execution of code has always bugged me and although there are some projects to change this I can't see it being properly fixed at least until NeoVim becomes the go-to Vim implementation. Emacs allows me to kick off commands and do other things until they return. In addition to that it nicely embeds Vim's most notable idea, mode-based editing, very well, allowing me to productively edit text while having a solid base to extend and to interactively write programs.&lt;/p&gt;&lt;p&gt;If you are interested in seeing how all that comes together in my Emacs configuration you can find it &lt;a href="https://github.com/martinklepsch/dotfiles/blob/master/emacs.d/init.el"&gt;on Github&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:2818d220-0d76-4797-b967-b6fa9e5018e0</id><title>Heroku-like Deployment With Dokku And DigitalOcean</title><published>2014-03-12T00:00:00.00Z</published><updated>2014-03-12T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/setting-up-your-own-little-heroku-with-dokku-and-digitalocean.html" type="text/html" title="Heroku-like Deployment With Dokku And DigitalOcean" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/setting-up-your-own-little-heroku-with-dokku-and-digitalocean.html">&lt;h1&gt;Heroku-like Deployment With Dokku And DigitalOcean&lt;/h1&gt;&lt;p&gt;Over the weekend I sat down to play around with Docker/Dokku and was able to set up a small machine on DigitalOcean that basically offers Heroku-like deployment. It was surprisingly simple so here is some rough outline that should get you going.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt;This guide is slightly opinionated and things can be done differently. I decided to settle for the way thats closest to Heroku to keep things short.&lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Create a Droplet at Digitalocean&lt;/h2&gt;&lt;p&gt;Go to &lt;a href="https://www.digitalocean.com/?refcode=fb6eb9b8b286"&gt;DigitalOcean&lt;/a&gt; and create a droplet (note the comments below the screenshots):&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img class="bordered" src="/images/hostname.png"&gt; &lt;figcaption&gt;Make sure the hostname is a fully qualified domain name, as it will be the git remote you'll push to to deploy.&lt;/figcaption&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img class="bordered" src="/images/image.png"&gt; &lt;figcaption&gt;When selecting the image, go to Applications and select the Dokku one.&lt;/figcaption&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There are some unresolved problems with Dokku on Ubuntu 13+ so if you are not just playing around you might want to setup Dokku manually.  After that you're ready to hit the create button and a droplet will be created within the next minute. The last bit of server-setup that‚Äôs required is Dokku‚Äôs.&lt;/p&gt;&lt;h2&gt;Setting up Dokku&lt;/h2&gt;&lt;p&gt;To get to Dokku‚Äôs setup screen just steer your browser to the IP shown in the droplet‚Äôs detail view:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img class="bordered" src="/images/droplet-ip.png"&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;What you‚Äôll see next is Dokku‚Äôs setup screen:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img class="bordered" src="/images/dokku-setup.png"&gt; &lt;figcaption&gt;Add an SSH key, tick the virtualhost checkbox, and make sure the hostname is correct.&lt;/figcaption&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;DNS Setup&lt;/h2&gt;&lt;p&gt;To get the hostname you chose earlier actually point to your machine running Dokku you need to add two A records to the zonefile of your domain. This strongly varies between domain/DNS providers so I can‚Äôt exactly say how it‚Äôd be done for yours. Whats important is that your provider supports wildcard entries. Also the value of an A record should be only the subdomain part of the hostname you set earlier, not the complete domain.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A       &amp;lt;subdomain-of-hostname&amp;gt;      &amp;lt;droplet-ip&amp;gt;
A       *.&amp;lt;subdomain-of-hostname&amp;gt;    &amp;lt;droplet-ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# in a zonefile it‚Äôd look like this:
*.apps 10800 IN A 107.170.35.171
apps 10800 IN A 107.170.35.171&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Deploying&lt;/h2&gt;&lt;p&gt;After you‚Äôve waited three hours for DNS servers to propagate the changes you should be able to do something like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone git@github.com:heroku/node-js-sample.git
cd node-js-sample
git remote add digital-ocean dokku@apps.example.com:nodeapp
git push digital-ocean master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now going to &lt;code&gt;nodeapp.&amp;lt;dokku-hostname&amp;gt;&lt;/code&gt; should bring up ‚ÄúHello World‚Äù from the app we just cloned and pushed.&lt;/p&gt;&lt;p&gt;If you want to add have a custom domain point to your app you'll need to either push to a remote like &lt;code&gt;dokku@apps.example.com:example.com&lt;/code&gt; or edit the nginx.conf that comes with Dokku‚Äôs nginx plugin.&lt;/p&gt;&lt;p&gt;Thanks to Dokku‚Äôs &lt;a href="https://github.com/progrium/buildstep"&gt;Buildstep&lt;/a&gt; that utilizes Heroku‚Äôs opensource buildpacks you can now deploy almost every application you can deploy to Heroku to Dokku as well.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:103f391e-8ccb-46ab-ac3b-7051d646a5fb</id><title>Woodworking Masterclasses</title><published>2014-02-19T00:00:00.00Z</published><updated>2014-02-19T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/woodworking-masterclasses.html" type="text/html" title="Woodworking Masterclasses" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/woodworking-masterclasses.html">&lt;h1&gt;Woodworking Masterclasses&lt;/h1&gt;&lt;p&gt;Back when I lived at home my dad used to make fun of my mechanical skills. He said if everyone just sits in front of computers the whole day no one will know how to drill a hole at some point. He would like what follows.&lt;/p&gt;&lt;p&gt;&lt;a href="http://woodworkingmasterclasses.com/"&gt;Woodworking Masterclasses&lt;/a&gt; is an online course to woodworking. It's the first time that I've seen such high quality material about learning a craft. They offer a simple monthly subscription to their courses with a new video being released every week. The videos are &lt;strong&gt;top-notch&lt;/strong&gt;. Kind of like you would expect it by a company like Treehouse but not by people who do woodworking and are probably not too familiar with cutting videos and this type of stuff. Take a look:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;div class="responsive-embed"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="281" mozallowfullscreen="" src="//player.vimeo.com/video/52801444?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;color=81c79b" webkitallowfullscreen="" width="500"&gt;&lt;/iframe&gt;&lt;/div&gt; &lt;figcaption&gt; &lt;p&gt;&lt;a href="http://vimeo.com/52801444"&gt;Clock Episode 1&lt;/a&gt; from &lt;a href="http://vimeo.com/woodworking"&gt;woodworking&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt; &lt;/figcaption&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I like how the internet supports the ongoing evolvement of crafts and woodworking has always fascinated me. These videos make me want to be at a farm with a huge workbench.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:c1881d68-6011-4888-a698-25339be6114f</id><title>Early Adopters And Inverted Social Proof</title><published>2014-02-07T00:00:00.00Z</published><updated>2014-02-07T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/early-adopters-and-inverted-social-proof.html" type="text/html" title="Early Adopters And Inverted Social Proof" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/early-adopters-and-inverted-social-proof.html">&lt;h1&gt;Early Adopters And Inverted Social Proof&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt; Hirschman credits the stability of early America with the fact that  discontents could simply travel west until they felt sufficiently freed from  its rules and restrictions. [...] &lt;br&gt;  There‚Äôs no limit on the number of possible subreddits, stack exchange sites,  or wikipedia pages that can be made, so a user can always keep traveling west  until they find something that‚Äôs worth sticking around to defend. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href="{{page.resource}}"&gt;A great analysis&lt;/a&gt; of why people are early adopters and how the constantly changing face of a community can affect their loyality to a product. One of those timeless reads you should probably re-read every now and then.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:24f91dd6-6b9e-4bca-9ae3-6f0a1465b4aa</id><title>Living Small</title><published>2014-02-05T00:00:00.00Z</published><updated>2014-02-05T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/living-small.html" type="text/html" title="Living Small" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/living-small.html">&lt;h1&gt;Living Small&lt;/h1&gt;&lt;p&gt;Living in a world where consumerism appears to be the predominant behaviour it seems more and more exciting to me to live a less materialistic lifestyle. What follows are some of the things that stimulated my thinking ‚Äî maybe they do the same for you.&lt;/p&gt;&lt;p&gt;After stumbling upon Bruce Hauman‚Äôs blog while trying to figure out some Clojure stuff I discovered another post on his blog where he talks about &lt;a href="http://rigsomelight.com/2013/09/09/frameless-geodesic-dome.html"&gt;building a geodesic dome&lt;/a&gt; in which he‚Äôs now (partly?) living for 3.5 years. It‚Äôs an amazingly analytical post about building something and simplifying it to it‚Äôs purest, most functional form. Motivated by spending less money on rent he iterated on his idea resulting in this construction:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img src="/images/dome-cropped.jpg"&gt; &lt;figcaption&gt;In case you were wondering what this ‚Äúgeodesic dome‚Äù thing looks like&lt;/figcaption&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In his post he also mentions the &lt;a href="http://thetinylife.com/what-is-the-tiny-house-movement/"&gt;Tiny Housing Movement&lt;/a&gt; through which I found a TED talk that nicely illustrates the pitfalls of the idea of living ‚Äúa good life‚Äù once you have your own income. The key line in the talk is: &lt;strong&gt;What does freedom mean to you?&lt;/strong&gt; I wanted to give a small summary here but, as it is with TED talks, &lt;a href="http://www.youtube.com/watch?v=9XRPbFIN4lk"&gt;the talk itself&lt;/a&gt; does it‚Äôs job pretty well.&lt;/p&gt;&lt;p&gt;I believe as thoughtful members of our society we should &lt;strong&gt;rethink our relationship to stuff&lt;/strong&gt;. How can we, as a society, make better use of the things we have at our disposal? What do I really need to &lt;strong&gt;own&lt;/strong&gt; to live my life? Ideas like &lt;a href="http://en.wikipedia.org/wiki/Sharing_economy"&gt;the share economy&lt;/a&gt; seem like a logical step with the increasing ease of sharing/routing information.&lt;/p&gt;&lt;p&gt;Purposely living with less is obviously not a new idea and so it happens to be part of things like &lt;a href="http://zenhabits.net/minimalist-fun-the-100-things-challenge/"&gt;the 100 Things Challenge&lt;/a&gt;. Coming across the 100 Things Challenge again and again I want to try it myself. In February I'm going to create an inventory of the things I own. Let‚Äôs see if the number of things I own is going to be above or below 100.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Stuff has gotten a lot cheaper, but our attitudes toward it haven't changed correspondingly. We overvalue stuff.  &lt;cite&gt;&lt;a href="http://paulgraham.com/stuff.html"&gt;Stuff&lt;/a&gt; by Paul Graham&lt;/cite&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:28bbfb38-f744-443c-808e-ad3f1ebd808f</id><title>Sending You a Telegram</title><published>2014-01-09T00:00:00.00Z</published><updated>2014-01-09T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/telegram.html" type="text/html" title="Sending You a Telegram" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/telegram.html">&lt;h1&gt;Sending You a Telegram&lt;/h1&gt;&lt;p&gt;&lt;a href="https://telegram.org"&gt;Telegram&lt;/a&gt; is a new messenger built by Pavel and Nikolai Durov.  They previously founded vk.com, Europe's second largest social network after Facebook (especially popular in Russia).&lt;/p&gt;&lt;h2&gt;A Few Reasons Why It's Great&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Unlike most other messaging apps their &lt;a href="https://telegram.org/source"&gt;clients (Android, iOS) source code and the underlying protocols are released with an open source license&lt;/a&gt; (GPL v2)&lt;/li&gt;&lt;li&gt;The founders note that they have no intention of &lt;a href="https://telegram.org/faq#q-how-are-you-going-to-make-money-out-of-this"&gt;making money with Telegram&lt;/a&gt; If they ever run out of money they want to finance it with donations and non-essential goodies.&lt;/li&gt;&lt;li&gt;There is an &lt;a href="https://core.telegram.org/api"&gt;API&lt;/a&gt; that allows anyone to hook   into Telegram and build clients, bots and additional tools.&lt;/li&gt;&lt;li&gt;The open API has led to the creation of   &lt;a href="https://itunes.apple.com/de/app/messenger-for-telegram/id747648890"&gt;Mac&lt;/a&gt;,   &lt;a href="http://tdesktop.com/"&gt;Windows&lt;/a&gt; and various other clients   (eg. &lt;a href="https://github.com/vysheng/tg"&gt;commandline&lt;/a&gt;) that allow you to use Telegram   on multiple devices (with proper syncing).&lt;/li&gt;&lt;li&gt;Groups can hold up to 200 users (compared to WhatsApp that allows you to   create 50 groups √† 50 participants max.)&lt;/li&gt;&lt;li&gt;All communication in Telegram &lt;a href="https://telegram.org/faq#security"&gt;is encrypted&lt;/a&gt; and there is even an option to   create ‚Äú&lt;a href="https://telegram.org/faq#secret-chats"&gt;secret chats&lt;/a&gt;‚Äù that: won‚Äôt be   stored on Telegram‚Äôs servers, can‚Äôt be fowarded and will delete themself after some   time.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Currently available for &lt;a href="https://itunes.apple.com/us/app/telegram-messenger/id686449807"&gt;iOS&lt;/a&gt;, &lt;a href="https://play.google.com/store/apps/details?id=org.telegram.messenger"&gt;Android&lt;/a&gt;, &lt;a href="https://itunes.apple.com/de/app/messenger-for-telegram/id747648890"&gt;Mac&lt;/a&gt; &amp;amp; &lt;a href="http://tdesktop.com"&gt;Windows&lt;/a&gt; there is really no reason not to make the switch.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Send me a message how you like it:&lt;/strong&gt; &lt;a href="tel:+4917664718250"&gt;+49176 64718250&lt;/a&gt;.&lt;br&gt; (It‚Äôs easy: just tap the number on your phone, save me as contact and I‚Äôll appear in your Telegram contacts.)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Although it's not a completely decentralized service (as communication services should eventually be in the future) it seems to be a big step in the right direction.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:a4f45de9-5915-46ed-a41a-b10f4560a177</id><title>Running a Marathon, Or Not</title><published>2014-01-08T00:00:00.00Z</published><updated>2014-01-08T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/running-a-marathon-or-not.html" type="text/html" title="Running a Marathon, Or Not" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/running-a-marathon-or-not.html">&lt;h1&gt;Running a Marathon, Or Not&lt;/h1&gt;&lt;p&gt;Earlier this year I came to the ‚Äúvery‚Äù surprising conclusion that I'm not doing enough sports in relation to the hours I spend in front of a computer every day. &lt;a href="/2013/03/10/From-Zero-To-Marathon-In-Six-Months/"&gt;I decided to run a marathon this September&lt;/a&gt;. I didn't. I did something else though that was fun and kind of sporty as well.&lt;/p&gt;&lt;p&gt;After starting runnning in March it was pretty amazing to see how quickly your stamina improves and longer distances become easier and less painful to run. After that initial success though improvements got smaller and motivation tanked quickly. Also the marathon I wanted to run was already booked out apparently.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;March&lt;/strong&gt; 60.3km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;April&lt;/strong&gt; 33.5km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;May&lt;/strong&gt; 18.3km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;June&lt;/strong&gt; 5.5km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;July&lt;/strong&gt; 5.1km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;August&lt;/strong&gt; 0.0km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;September&lt;/strong&gt; 20km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;October&lt;/strong&gt; 4.8km&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a friend who also inspired me to go running I heard about &lt;strong&gt;Tough Mudder&lt;/strong&gt;. Since I already noticed my lack of a goal I almost immediately registered in the beginning of June. The description on Wikipedia sounded exciting for sure:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Tough Mudder&lt;/strong&gt; is an endurance event series in which participants attempt 10-12  mile long military-style obstacle courses. Designed by British Special Forces to  test mental as well as physical strength, obstacles often play on common human  fears, such as fire, water, electricity and heights.  &lt;cite&gt;&lt;a href="http://en.wikipedia.org/wiki/Tough_Mudder"&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;strike&gt;Preparation&lt;/strike&gt;&lt;/h2&gt;&lt;p&gt;After seeing the (surprisingly) fast improvements when training I was certain I could get ready for a 20km run in a month or less. So I decided to start training a month before the event on 19th October:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;01.06 - 23.09&lt;/strong&gt; 0.0km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24.09&lt;/strong&gt; 5.7km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;28.09&lt;/strong&gt; 9km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;30.09&lt;/strong&gt; 6.3km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;06.10&lt;/strong&gt; 4.8km&lt;/li&gt;&lt;li&gt;&lt;strong&gt;19.10&lt;/strong&gt; Tough Mudder&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Somehow I wasn't quite persistent and stopped shortly after starting again. I guess mostly because it was such a pain to build up stamina &lt;strong&gt;again&lt;/strong&gt;.&lt;/p&gt;&lt;h2&gt;Oh Shit! It's tomorrow!&lt;/h2&gt;&lt;p&gt;The days immediately before the event were full of uncertainty and doubt whether I could make it or not. 20km without any training? Is that even remotely possible? I never ran 20km before. Sometimes excuses not to go popped up in my mind but the hefty price tag of around 100‚Ç¨ and the social pressure of running in a group didn't really leave the option of not going.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Surprisingly it was possible&lt;/strong&gt;. The around 15 obstacles usually took some time to pass and equally gave some to rest. The hardest part (stamina-wise) was a 2-4km trail up and down a hill over and over again. The whole course took us around 3 hours to complete.&lt;br&gt; We got a bit dirty on the way. I say &lt;strong&gt;we&lt;/strong&gt; because completing the course on your own is almost impossible and we certainly have been a great team:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img src="/images/tough-mudder.jpg"&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:798632b6-60b7-4163-b1cc-ef3f49bbbc7b</id><title>Code Simplicity</title><published>2014-01-06T00:00:00.00Z</published><updated>2014-01-06T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/code-simplicity-review.html" type="text/html" title="Code Simplicity" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/code-simplicity-review.html">&lt;h1&gt;Code Simplicity&lt;/h1&gt;&lt;p&gt;When O'Reilly promoted their cyber monday I somehow really got into a shopping spree.&lt;/p&gt;&lt;p&gt;First book I finished now is &lt;a href="http://shop.oreilly.com/product/0636920022251.do"&gt;Code Simplicity&lt;/a&gt; by &lt;a href="http://max.kanat-alexander.com/"&gt;Max Kanat Alexander&lt;/a&gt;. The book doesn't hold on to the scientific approach that the blurb promises but once I made my peace with that it became a good read. &lt;br&gt; Some of the things I liked most:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It provides good reasoning why an iterative process usually provides better  results than the old &lt;em&gt;Plan &amp;amp; Implement&lt;/em&gt; workflow.&lt;/li&gt;&lt;li&gt;It has a strong argumentation for testing that can help you the next time  you have to explain why it is important or understand it yourself if you didn't  so far.&lt;/li&gt;&lt;li&gt;It gives you some great new angles on how to prioritize features.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Overall I'd probably recommend the book but you shouldn't expect to much scientific proof. Probably that's not even possible in that area but the blurb said so and that caused &lt;a href="https://readmill.com/christoffer/reads/code-simplicity"&gt;some&lt;/a&gt; &lt;a href="https://readmill.com/chdorner/reads/code-simplicity"&gt;bad&lt;/a&gt; reviews so take it with a grain of salt.&lt;/p&gt;&lt;p&gt;You can find all of my personal highlights &lt;a href="https://readmill.com/mklappstuhl/reads/code-simplicity"&gt;on Readmill&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:2bf0d1e8-11eb-4ee5-970e-cfb3ce6cdf59</id><title>What do we need to know?</title><published>2013-12-05T00:00:00.00Z</published><updated>2013-12-05T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/what-do-we-need-to-know.html" type="text/html" title="What do we need to know?" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/what-do-we-need-to-know.html">&lt;h1&gt;What do we need to know?&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt; I go through periods of self-doubt about my qualifications as a web developer.  I have a sense I‚Äôm not alone in this. Our field is by nature a generalists‚Äô  field, where expertise involves synthesis of concepts and technologies, not  complete mastery of a single, static topic. It‚Äôs hard to know how to tell if  you‚Äôre good at your job. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This post on A List Apart resonated with me a lot. &lt;a href="https://twitter.com/lyzadanger"&gt;Liza Danger Gardner&lt;/a&gt; describes a situation we all have been in: someone talks about that &lt;em&gt;new feature you never heard of&lt;/em&gt; and you have no idea what they are talking about. Web development being a profession that develops so fast and in so many directions at the same time &lt;strike&gt;sometimes&lt;/strike&gt; makes it hard to follow along.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img src="/images/fear.gif"&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; There‚Äôs no defined lesson plan or standardized test for the many branches of  real-world applied web development, and the whole profession is a moving target.  So if we can‚Äôt possibly know everything, all the time, what things do we need to  know? &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;She then attempts to answer this question by answering the opposite question ‚ÄúWhat do we not need to know?‚Äù which is fine but doesn't exactly provide you with a list of things that are &lt;em&gt;required&lt;/em&gt;. Probably this list is hard to create but I'm curious what you would put on it. What are the high level concepts in web development everyone should know about? Is it ‚ÄúHow the DOM works‚Äù or is it ‚ÄúWhat Prototypes are in Javascript‚Äù or is it ...?&lt;/p&gt;&lt;p&gt;I'd love to hear what you think is ‚Äúrequired knowledge‚Äù on Twitter (&lt;a href="https://twitter.com/martinklepsch"&gt;@martinklepsch&lt;/a&gt;) or elsewhere.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:117af064-eea6-4eff-aaa8-c18c35d97ad3</id><title>Sculley's Disease</title><published>2013-12-03T00:00:00.00Z</published><updated>2013-12-03T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/sculleys-disease.html" type="text/html" title="Sculley's Disease" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/sculleys-disease.html">&lt;h1&gt;Sculley's Disease&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p style="display:none"&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Just found this quote by Steve Jobs on 37signals‚Äô blog. It's taken from &lt;a href="http://www.youtube.com/watch?v=F4L26Jp_AT4&amp;amp;list=TLMnOz1ppz1Sw"&gt;The Lost Interview&lt;/a&gt; that was conducted shortly after Steve left Apple and founded NeXT. The question was: ‚ÄúWhat's important to you in the development of a product?‚Äù&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; You know, one of the things that really hurt Apple was after I left John  Sculley got a very serious disease. It‚Äôs the disease of thinking that  a really great idea is 90% of the work. And if you just tell all these other  people ‚Äúhere‚Äôs this great idea,‚Äù then of course they can go off and make it  happen. &lt;/p&gt;&lt;p&gt; And the problem with that is that there‚Äôs just a tremendous amount of  craftsmanship in between a great idea and a great product. And as you  evolve that great idea, it changes and grows. It never comes out like it  starts because you learn a lot more as you get into the subtleties of  it. And you also find there are tremendous tradeoffs that you have to  make. There are just certain things you can‚Äôt make electrons do. There  are certain things you can‚Äôt make plastic do. Or glass do. Or factories  do. Or robots do. &lt;/p&gt;&lt;p&gt; Designing a product is keeping five thousand things in your brain  and fitting them all together in new and different ways to get what  you want. And every day you discover something new that is a new  problem or a new opportunity to fit these things together a little  differently. &lt;/p&gt;&lt;p&gt; And it‚Äôs that process that is the magic.  &lt;cite&gt;Steve Jobs&lt;/cite&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:ecc821bc-1816-4571-aab4-da5ef4e8d346</id><title>A Resurrection Post</title><published>2013-12-01T00:00:00.00Z</published><updated>2013-12-01T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/a-resurrection-post.html" type="text/html" title="A Resurrection Post" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/a-resurrection-post.html">&lt;h1&gt;A Resurrection Post&lt;/h1&gt;&lt;p&gt;After not being active here for the last couple of months I thought a bit about what to do with this blog and came up with some changes and ideas.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;More regular updates and smaller linked-list style posts.&lt;/strong&gt; Writing full   length posts about more complex topics is nice but not something I can do   regulary right now. Still there are often things I find and would like to   share. I also hope that this gets me more used to ‚Äúregular publishing‚Äù and   thus increases the frequency of more in-depth posts.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A newsletter.&lt;/strong&gt; There will be a (most likely digest-style)   newsletter in irregular intervals depending on the frequency of updates.&lt;br&gt;   &lt;strong&gt;Why a newsletter?&lt;/strong&gt; This is most likely a topic for a seperate post but   with the advent of platforms like Medium, Twitter and friends it's common not to ‚Äúown   the connection‚Äù between a publisher and a writer anymore and I believe that   this is wrong. There is RSS but it's only a one way channel and I'd actually like to   get to know the people reading the stuff I'm posting here. Also not everyone   has an RSS reader set up. There is a subscribe form at the end of each post   and on &lt;a href="/"&gt;the index page&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Some design changes.&lt;/strong&gt; To keep that one short: less wierd ‚Äúabout me‚Äù   bullshit, more content. Also: &lt;a href="javascript:;"&gt;rainbow&lt;/a&gt; &lt;a href="javascript:;"&gt;colors&lt;/a&gt;   &lt;a href="javascript:;"&gt;everywhere&lt;/a&gt;!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I already have a couple of things queued up to be published including one more lengthy post about how I'd attempt to set up a company if I'd have to do it now (everyone knows better, right?) If you have thoughts on this &lt;a href="mailto://martinklepsch@googlemail.com"&gt;I'd appreciate any input&lt;/a&gt; on the draft I have laying around.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:adc62a3d-a5de-43b3-831f-56c3ee377d29</id><title>A Trip To The US</title><published>2013-09-24T00:00:00.00Z</published><updated>2013-09-24T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/a-trip-to-the-us.html" type="text/html" title="A Trip To The US" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/a-trip-to-the-us.html">&lt;h1&gt;A Trip To The US&lt;/h1&gt;&lt;p&gt;Wow. It has been quite a while since I wrote anything here. Almost 5 months, phew.&lt;/p&gt;&lt;p&gt;So what I have to say is that I'm going to visit the US from &lt;strong&gt;26th of October&lt;/strong&gt; to &lt;strong&gt;10th of November&lt;/strong&gt;. I plan to be in New York City the first weekend, spend some time around Philadelphia within the week after that and then go to Miami for another week.&lt;/p&gt;&lt;p&gt;I'd love to meet some interesting people, have some beers, crash some parties. So if you have some friends I should meet, &lt;a href="mailto:martinklepsch+us@googlemail.com"&gt;let me know&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;Also me and the friend I'm visiting (who's from Philadelphia) are looking for a couch to crash while we're staying in New York and Miami.&lt;/p&gt;&lt;p&gt;Cheers to that ‚Äî It's gonna be fun!&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:4682a859-015c-401e-a3e4-f47938c9312b</id><title>Analytics Data</title><published>2013-04-28T00:00:00.00Z</published><updated>2013-04-28T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/analytics-data.html" type="text/html" title="Analytics Data" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/analytics-data.html">&lt;h1&gt;Analytics Data&lt;/h1&gt;&lt;p&gt;For quite a while now there is this idea of &lt;em&gt;being data-driven&lt;/em&gt; and analyzing everything that is happening on your platform in order to identify potential changes that could improve your core metrics such as user engagement.&lt;/p&gt;&lt;p&gt;There are &lt;a href="https://keen.io/"&gt;quite&lt;/a&gt; &lt;a href="https://mixpanel.com/"&gt;a&lt;/a&gt; &lt;a href="https://www.kissmetrics.com/"&gt;few&lt;/a&gt; services allowing you to send events triggered by users to their servers that provide you great interfaces to actually make some sense of the data you gathered.&lt;/p&gt;&lt;p&gt;While this is all great I see one major problem with this style of analytics: the data is not really yours. In a time where user engagement is getting more and more important I find it troubling to store all the data you collected on a service only accessible through a limited API (vs. full featured database access.)&lt;/p&gt;&lt;p&gt;Limited access to this data can slow you down building internal tools like dashboards and custom metrics/reports. There is also a vendor lock-in to a certain degree. While you can switch vendors easily using Segment.io's &lt;a href="https://segment.io/libraries/analytics.js/"&gt;analytics.js&lt;/a&gt; taking your data with you is not as easy as that.&lt;/p&gt;&lt;p&gt;While I'm usually a fan of outsourcing certain complex things (i.e. hosting) I feel like this is one of the rare occasions where people should think twice. Unfortunately I'm not aware of good alternatives. If you are please &lt;a href="http://twitter.com/martinklepsch"&gt;tweet me&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:d3811416-0031-4a02-8578-521a4540f889</id><title>Asynchronous Communication</title><published>2013-04-25T00:00:00.00Z</published><updated>2013-04-25T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/asynchronous-communication.html" type="text/html" title="Asynchronous Communication" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/asynchronous-communication.html">&lt;h1&gt;Asynchronous Communication&lt;/h1&gt;&lt;p&gt;Communication is a central part of working in teams. I believe having asynchronous communication channels and making heavy use of them can have great effects on productivity, transparency and therefore happiness and fun within teams. Here are a few reasons why.&lt;/p&gt;&lt;h2&gt;Interruptions&lt;/h2&gt;&lt;p&gt;There are &lt;a href="http://www.nytimes.com/2007/03/25/business/25multi.html"&gt;dozens of studies&lt;/a&gt; about the consequences of being interrupted while performing demanding tasks. They usually suggest that it takes a human around 20 minutes to get back into the state they have been in prior to the interruption. As if this wouldn't be enough it also increases the chances of making mistakes.&lt;/p&gt;&lt;p&gt;While a chatroom doesn't necessarily removes interruptions all at once it allows everyone to react to an interruption at will. If you really want no interruption for a certain period of time you can easily turn off all notifications. Not reacting to the waving hands of a coworker is quite a bit harder (and not very polite as well).&lt;/p&gt;&lt;h2&gt;Transparency&lt;/h2&gt;&lt;p&gt;Transparency is a great thing. I strongly believe an absolutistic approach to transparency is the only way to go nowadays. Transparency helps to identify bad decisions early on and increases acceptance of decisions by keeping everyone in the loop. Companies like &lt;a href="https://stripe.com/blog/email-transparency"&gt;Stripe&lt;/a&gt; are doing an excellent job at advocating this approach. I could go into lengths about how important this is.&lt;/p&gt;&lt;p&gt;Achieving this level of transparency with meetings and written reports is very time consuming if not impossible at all. Channeling most communication through asynchronous communication channels allows other people to passively follow along and saves a bunch of time that would otherwise have been spent in inefficient meetings.&lt;/p&gt;&lt;h2&gt;Written Communication&lt;/h2&gt;&lt;p&gt;Think before you speak. That's what they say. Problem is that this is quite hard in a fast paced environment like meetings. Just taking 5 minutes to order your thoughts isn't something people usually do there. Instead they talk. Written communication forces you to get to the point in a way that everyone can follow and at the same time allows you to refine your own understanding of the problem.&lt;/p&gt;&lt;h2&gt;Tool Integration&lt;/h2&gt;&lt;p&gt;Most of the team chat things you'll find provide integrations with your existing toolchain. It's easy to setup a bot that notifies you about breaking builds, new commits, errors on your platform or whatever else. Integrating this kind of information into your communication channels allows better collaboration on it and also increases visibility of what people are working on (= transparency).&lt;/p&gt;&lt;h2&gt;Logging&lt;/h2&gt;&lt;p&gt;In my experience things are often discussed in passing and sometimes even decisions are made in these situations. A week later when you actually find the time to implement the things decided back then they seem stupid and you are not able to actually retrieve the reasoning behind them from the back of your head. Having in place the infrastructure to quickly discuss something without setting up a meeting is a great way to avoid this kind of decision making and also allows you to trace back past discussions if a decision is being questioned.&lt;/p&gt;&lt;h2&gt;Location-independent Productivity&lt;/h2&gt;&lt;p&gt;Channeling most conversation through chat rooms makes team members less dependent on being geographically close to each other. (I'm not expanding on this as I think removing a dependency is always a good thing.)&lt;/p&gt;&lt;h2&gt;Closing Remarks &amp;amp; Further Reading&lt;/h2&gt;&lt;p&gt;I'm a strong believer when it comes to asynchronous communication and I hope this list provides a good overview about the main reasons why it's a good approach to internal communication.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://zachholman.com/posts/chat/"&gt;Chat Trumps Meetings&lt;/a&gt; by Zach Holman&lt;/li&gt;&lt;li&gt;&lt;a href="http://zachholman.com/posts/how-github-works-asynchronous/"&gt;How Github Works Asynchronous&lt;/a&gt; by Zach Holman&lt;/li&gt;&lt;li&gt;&lt;a href="http://blog.alexmaccaw.com/stripes-culture"&gt;Stripes Culture&lt;/a&gt; by Alex MacCaw&lt;/li&gt;&lt;li&gt;&lt;a href="http://blog.alexmaccaw.com/stripes-culture"&gt;How Stripe Builds Software&lt;/a&gt; with Greg Brockmann&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:73abd373-1c0b-44d1-aed4-2e48a5abfc6f</id><title>From Zero to Marathon in Six Monthts</title><published>2013-03-10T00:00:00.00Z</published><updated>2013-03-10T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/from-zero-to-marathon-in-six-months.html" type="text/html" title="From Zero to Marathon in Six Monthts" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/from-zero-to-marathon-in-six-months.html">&lt;h1&gt;From Zero to Marathon in Six Monthts&lt;/h1&gt;&lt;p&gt;After moving to Berlin I kind of failed to continue some regular sports activity. This is two years ago now. Today I'm going to change that.&lt;/p&gt;&lt;p&gt;Today I'm starting to run.&lt;/p&gt;&lt;h2&gt;Why Running&lt;/h2&gt;&lt;p&gt;The answer is as simple as it gets: because it can be done everywhere at any time and without any organizational effort such as finding a partner for going climbing, which I did back then in my old hometown.&lt;/p&gt;&lt;h2&gt;Running a Marathon&lt;/h2&gt;&lt;p&gt;To stay motivated in the long term I decided it would be nice to set some goal to achieve and what else could that be beside running a marathon? There is not much coming to my mind. So starting today I'm training to run a marathon in about six months. I don't know which marathon yet unfortunately, especially since the &lt;a href="http://www.bmw-berlin-marathon.com/"&gt;Berlin marathon&lt;/a&gt;‚Äôs registration is closed already.&lt;/p&gt;&lt;p&gt;My training schedule isn‚Äôt finished yet but for the first month I‚Äôm planning to run at least &lt;a href="http://www.runmap.net/route/437129"&gt;3 days a week&lt;/a&gt; at an average distance of six kilometers.  I hope to run longer distances irregularly as soon as possible as well.&lt;/p&gt;&lt;p&gt;Today is Day One.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:83080c01-c898-4e8e-9996-97f8d60d3a4a</id><title>Git Information in Fish Shell&amp;rsquo;s Prompt</title><published>2012-12-17T00:00:00.00Z</published><updated>2012-12-17T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/git-prompt-for-fish-shell.html" type="text/html" title="Git Information in Fish Shell&amp;rsquo;s Prompt" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/git-prompt-for-fish-shell.html">&lt;h1&gt;Git Information in Fish Shell&amp;rsquo;s Prompt&lt;/h1&gt;&lt;p&gt;After toying around with &lt;a href="http://zsh.org"&gt;Zsh&lt;/a&gt; for a while I stumbled upon Fish or more precisely &lt;a href="http://ridiculousfish.com/shell"&gt;Ridiculous Fish&lt;/a&gt; which is a fork of the original &lt;a href="http://fishshell.com/"&gt;Fish Shell&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Since Fish does not have a configuration framework like &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; you have to setup your prompt with additional Git information yourself. I consider this an advantage though as you can't just take a bunch of configuration files from somewhere without having an idea what they actually do.&lt;/p&gt;&lt;p&gt;It took me a while to find &lt;a href="https://github.com/fish-shell/fish-shell/blob/master/share/functions/__fish_git_prompt.fish"&gt;this part&lt;/a&gt; of the Fish source code which documents this functionality quite well. An example which you can put into &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; follows below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;set normal (set_color normal)
set magenta (set_color magenta)
set yellow (set_color yellow)
set green (set_color green)
set red (set_color red)
set gray (set_color -o black)

# Fish git prompt
set __fish_git_prompt_showdirtystate 'yes'
set __fish_git_prompt_showstashstate 'yes'
set __fish_git_prompt_showuntrackedfiles 'yes'
set __fish_git_prompt_showupstream 'yes'
set __fish_git_prompt_color_branch yellow
set __fish_git_prompt_color_upstream_ahead green
set __fish_git_prompt_color_upstream_behind red

# Status Chars
set __fish_git_prompt_char_dirtystate '‚ö°'
set __fish_git_prompt_char_stagedstate '‚Üí'
set __fish_git_prompt_char_untrackedfiles '‚ò°'
set __fish_git_prompt_char_stashstate '‚Ü©'
set __fish_git_prompt_char_upstream_ahead '+'
set __fish_git_prompt_char_upstream_behind '-'


function fish_prompt
  set last_status $status

  set_color $fish_color_cwd
  printf '%s' (prompt_pwd)
  set_color normal

  printf '%s ' (__fish_git_prompt)

  set_color normal
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:fa108763-3ed7-4ba6-bc4a-c39ddde35b5a</id><title>When We Build Stuff</title><published>2012-08-20T00:00:00.00Z</published><updated>2012-08-20T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/when-we-build-stuff.html" type="text/html" title="When We Build Stuff" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/when-we-build-stuff.html">&lt;h1&gt;When We Build Stuff&lt;/h1&gt;&lt;p&gt;I recently discovered this great presentation by checking out some of my follow-recommendations on twitter. &lt;a href="https://twitter.com/wilsonminer"&gt;Wilson Miner&lt;/a&gt; was one of them. This talk adresses everyone who builds software and makes some of the broader side-effects of designing things other people use more visible.&lt;/p&gt;&lt;p&gt;The presentation itself is more a piece of acting than a usual talk. I enjoyed the variety so I hope you will too.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="responsive-embed"&gt;&lt;iframe allowfullscreen="" frameborder="0" mozallowfullscreen="" src="https://player.vimeo.com/video/34017777?byline=0&amp;amp;portrait=0&amp;amp;color=a5e2a1" webkitallowfullscreen=""&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://vimeo.com/34017777"&gt;Wilson Miner - When We Build&lt;/a&gt; from &lt;a href="http://vimeo.com/build"&gt;Build&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:22ccc641-b55e-4c29-83b1-631fbd4598f6</id><title>Models, Operations, Views and Events</title><published>2012-07-25T00:00:00.00Z</published><updated>2012-07-25T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/models-operations-views-and-events.html" type="text/html" title="Models, Operations, Views and Events" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/models-operations-views-and-events.html">&lt;h1&gt;Models, Operations, Views and Events&lt;/h1&gt;&lt;p&gt;Conrad Irwin:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Models&lt;/strong&gt; encapsulate everything that your application knows.&lt;br&gt;  &lt;strong&gt;Operations&lt;/strong&gt; encapsulate everything that your application does.&lt;br&gt;  &lt;strong&gt;Views&lt;/strong&gt; mediate between your application and the user.&lt;br&gt;  &lt;strong&gt;Events&lt;/strong&gt; are used to join all these components together safely.&lt;br&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;While MVC is still widely used and considered a good pattern for modern application development there are also a few people thinking about alternatives that suit the actual application logic better than the current mindset. One of those people is &lt;a href="http://cirw.in"&gt;Conrad Irwin&lt;/a&gt;. His approach is very focused on connecting the different parts of the application by using events which seems at least easier to grasp than the exact task of &lt;em&gt;Controllers&lt;/em&gt; in &lt;em&gt;Model-View-Controller&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:36e26c80-51ab-4350-b714-f5083763d86a</id><title>The Twelve Factor App</title><published>2012-06-28T00:00:00.00Z</published><updated>2012-06-28T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/twelve-factor-app.html" type="text/html" title="The Twelve Factor App" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/twelve-factor-app.html">&lt;h1&gt;The Twelve Factor App&lt;/h1&gt;&lt;p&gt;Around December 2011 the awesome crowd around Heroku released a &lt;a href="https://github.com/adamwiggins/12factor"&gt;now open-source document&lt;/a&gt; that describes 12 factors that build up a methodology of developing software-as-a-service products.&lt;/p&gt;&lt;p&gt;The main goals of &lt;a href="http://www.12factor.net/"&gt;those 12 rules&lt;/a&gt; are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;minimizing effort to board new developers&lt;/li&gt;&lt;li&gt;maximizing portability&lt;/li&gt;&lt;li&gt;encouraging continous deployment&lt;/li&gt;&lt;li&gt;allowing to scale effortless&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you are developing a SaaS product this document will show you lots of ways to improve your development practices. Fortunately it is not directly coupled to any specific language or development environment (most tool examples are coming from Ruby, Python and Clojure though) so that everyone will have something to take away.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:9b66924e-12c5-4f70-bfcc-c2b732defb0d</id><title>Paris And Back</title><published>2012-05-21T00:00:00.00Z</published><updated>2012-05-21T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/paris-and-back.html" type="text/html" title="Paris And Back" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/paris-and-back.html">&lt;h1&gt;Paris And Back&lt;/h1&gt;&lt;p&gt;After being back home from Paris where I stayed the last two weeks I have a fun story to share. It's not about something great that happened in Paris but about something that started the evening before my departure.&lt;/p&gt;&lt;p&gt;After meeting with a friend there we got home at 2am and set up the alarm to 4:35am to get up in time, get some work done and get to the airport sometime around 6.20am. When I opened my eyes I immediately noticed that there was no alarm ringing. That made me jump for the alarm clock. It was 7.15am. I started to hate myself. I even asked my friend to pinch me so that this nightmare ends. &lt;/p&gt;&lt;p&gt;&lt;em&gt;This was the second flight for me ever and I missed it.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;We went to the trainstation then and asked about a train. 125‚Ç¨ and an 8 hours trainride. Since that was a nighttrain we decided to go to the airport and check out if there are some cheap flights which I could book ‚Äî &lt;em&gt;last minute&lt;/em&gt;. There was a flight. It was not cheap with a 182‚Ç¨ pricetag though. Given the fact that I payed 100‚Ç¨ for the original flights I was completely pissed. After a couple of minutes I decided to take the flight for 182‚Ç¨ and we even made a little fun about what it costs to sleep in. Nevertheless I still hated myself for not being able to get up in time.&lt;/p&gt;&lt;p&gt;Now this is already a story worth telling but it had to come better.&lt;/p&gt;&lt;p&gt;When waiting to board the plane things got delayed because the plane was struck by lightning and the ground crew had to do extra technical checks. After some time they announced that they found another plane and that boarding will start in 30 minutes.&lt;/p&gt;&lt;p&gt;I decided to walk around a little and when I came back the flight assistant was asking some people sitting on the ground something I could not understand. So I asked one french girl who was sitting there what she asked. And here it comes. She asked if you would take a later flight in exchange for 250‚Ç¨. When I heard that I immediately ran to the flight assistant and told her: &lt;em&gt;&amp;quot;I'm in!&amp;quot;&lt;/em&gt; and so I got 250‚Ç¨.&lt;/p&gt;&lt;p&gt;As a small bonus we even got a voucher for a restaurant at the airport where I another french girl and one american guy spent our 2 hours extra waiting time eating some good meat and french fries.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I felt so incredibly lucky.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Before we got to the airport I told my friend:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Oh, and that happens to me. Usually I am so lucky. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:2c16f352-042b-4c2d-b294-d9d3f34ba0f4</id><title>A Friend Is Looking For A Summer Internship</title><published>2012-05-07T00:00:00.00Z</published><updated>2012-05-07T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/a-friend-is-looking-for-a-summer-internship.html" type="text/html" title="A Friend Is Looking For A Summer Internship" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/a-friend-is-looking-for-a-summer-internship.html">&lt;h1&gt;A Friend Is Looking For A Summer Internship&lt;/h1&gt;&lt;p&gt;This summer a friend of mine is visiting Berlin for around 6 weeks by end of June. I encouraged him to work somewhere to get an impression of working in technology companies during that time.&lt;/p&gt;&lt;p&gt;He is still quite young but eager to learn more than most other people I know.  He's 17 from Krakow in Poland where he'll attend at &lt;a href="http://www.agh.edu.pl/en"&gt;AGH University of Science and Technology&lt;/a&gt;  studying Computer Science by October next year. He speaks German on a nearly native level (he got into several final rounds of nationwide language contests) and also English. Beside that he also reached the maximum score at &lt;a href="http://en.wikipedia.org/wiki/Mathematical_Kangaroo"&gt;Mathematical Kangaroo&lt;/a&gt; and won several other math olympiades.&lt;/p&gt;&lt;p&gt;From a technical point of view he is mostly comfortable with Python and C++. He did not work a lot in any special area of software development so he might be unexperienced with the special limitations or technologies that are used in one area. He has some experience with web technologies (including Django) though.&lt;/p&gt;&lt;p&gt;If you'd like to get in touch and to get to know some great new talent just send me a short note and I will introduce you gladly.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:31835991-b050-4b17-b56d-c2fcbb06dbb7</id><title>Kandan Team Chat</title><published>2012-05-03T00:00:00.00Z</published><updated>2012-05-03T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/kandan-team-chat.html" type="text/html" title="Kandan Team Chat" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/kandan-team-chat.html">&lt;h1&gt;Kandan Team Chat&lt;/h1&gt;&lt;p&gt;I just discovered &lt;a href="http://kandan.me"&gt;Kandan&lt;/a&gt; which seems to be a great opensource alternative to &lt;a href="http://campfirenow.com/"&gt;Campfire&lt;/a&gt; (a web-based team chat application). The interface is pretty similar and the developers probably borrowed a few of the interface ideas behind campfire.&lt;/p&gt;&lt;p&gt;&lt;img alt="Kandan Screenshot" src="/images/small-kandan-preview.png"&gt;&lt;/p&gt;&lt;p&gt;Some time ago there was also &lt;a href="https://grove.io/"&gt;Grove.io&lt;/a&gt; which advertises itself as &amp;quot;hosted IRC&amp;quot;. The web interface they provide also provides some of Campfires more pupular features such as image embedding. Unfortunately they went into a paid-only model which makes it less attractive to many people.&lt;/p&gt;&lt;p&gt;Hopefully Kandan evolves into something bigger and team chat in companies is no longer limited to just Campfire or worse Skype.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:58f62d22-8347-41b0-a368-81ee4b1771f1</id><title>Entypo Icon Set</title><published>2012-03-08T12:00:00.00Z</published><updated>2012-03-08T12:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/entypo-icon-set.html" type="text/html" title="Entypo Icon Set" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/entypo-icon-set.html">&lt;h1&gt;Entypo Icon Set&lt;/h1&gt;&lt;p&gt;Daniel Bruce:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Entypo is a set of 100+ carefully crafted pictograms available as an OpenType font, vector  EPS and web font. All released for free under the Creative Commons license CC BY-SA. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There is not much more to add. Entypo covers many common icon use cases and the fact that it ships with an OpenType font makes it even smoother to use. I use a few icons here and there on this site and mainly prefer this icon set for its cleanness and simplicity which allows you to easily integrate it into most designs.&lt;/p&gt;&lt;p&gt;&lt;strike&gt;Below you can see some of my favorites from the set. The cool thing about having it as a font is also that you can change colors very easy.&lt;/strike&gt; Deprecated the demo.&lt;/p&gt;&lt;p&gt;For a complete listing including a character map &lt;a href="http://bistro.convergencecms.co/entypo"&gt;check this out&lt;/a&gt;. Be sure to follow &lt;a href="http://twitter.com/danielbruce_"&gt;Daniel on Twitter&lt;/a&gt; for more icon awesomeness.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:e5058531-a427-4791-8146-ae2f24e6973b</id><title>Startups, This Is How Design Works</title><published>2012-03-08T10:00:00.00Z</published><updated>2012-03-08T10:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/startups-this-is-how-design-works.html" type="text/html" title="Startups, This Is How Design Works" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/startups-this-is-how-design-works.html">&lt;h1&gt;Startups, This Is How Design Works&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt; Companies like Apple are making design impossible for startups to ignore. Startups like Path,  Airbnb, Square, and Massive Health have design at the core of their business, and they're  doing phenomenal work. But what is ‚Äòdesign‚Äô actually? Is it a logo? A Wordpress theme? An  innovative UI? &lt;/p&gt;&lt;p&gt; It‚Äôs so much more than that. It‚Äôs a state of mind. It‚Äôs an approach to  a problem. It‚Äôs how you‚Äôre going to kick your competitor‚Äôs ass. This handy guide will help  you understand design and provide resources to help you find awesome design talent.  &lt;cite&gt;Wells Riley: &lt;a href="http://startupsthisishowdesignworks.com"&gt;Startups, This Is How Design Works&lt;/a&gt;&lt;/cite&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;Startups, This Is How Design Works&lt;/em&gt; is an excellent read for every designer and those who want to be one. It builds up around a definition of good design by Dieter Rams, an early consumer product designer at Braun which inspired Apple in many of their fundamental design choices.&lt;/p&gt;&lt;p&gt;The web is definitly missing more high quality resources like this. It just takes people to much time to realize that design is not about photoshop brushes.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:0af93d8a-9216-4b83-857e-b9bb4f7127d9</id><title>Hosting A Static Site On Amazon S3</title><published>2012-02-20T00:00:00.00Z</published><updated>2012-02-20T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/hosting-a-static-site-on-s3.html" type="text/html" title="Hosting A Static Site On Amazon S3" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/hosting-a-static-site-on-s3.html">&lt;h1&gt;Hosting A Static Site On Amazon S3&lt;/h1&gt;&lt;h2&gt;Preface&lt;/h2&gt;&lt;p&gt;Hosting a static site is preferred by many developers because it gives you a maximum of control at a minimum of maintenance. While there are other tools available &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; became something like a reference implementation, especially under Ruby developers. Since Jekyll's creator, Tom Preston Werner, also founded Github it is not surprising that Github is providing a service to autogenerate and host your static site as soon as you push it.&lt;/p&gt;&lt;p&gt;Now, that sounds like perfect all around. It is. As long as you are not using custom generators or converters with Jekyll everything is good. If you do however you'll quickly notice that Github &lt;a href="https://github.com/mojombo/jekyll/issues/325"&gt;disabled custom Ruby code&lt;/a&gt; to keep everything secure.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;aside&gt;&lt;p&gt; There are still ways to host your static site with Github but using these would mean losing nearly all the benefits from hosting at Github (eg. Autogeneration).&lt;/p&gt;&lt;/aside&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Since the requirements for hosting a static site are nearly non-existent you can easily move it onto any Server.&lt;/p&gt;&lt;p&gt;I decided for Amazon S3 because it's widely used, reliable and cheap.&lt;/p&gt;&lt;h2&gt;Static Site Generators&lt;/h2&gt;&lt;p&gt;While there are &lt;a href="http://nanoc.stoneship.org/" title="Nanoc"&gt;quite&lt;/a&gt; &lt;a href="http://middlemanapp.com" title="Middleman"&gt;a&lt;/a&gt; &lt;a href="https://www.ruby-toolbox.com/categories/static_website_generation" title="Ruby-Toolbox Listing"&gt;lot&lt;/a&gt;. Jekyll is used by most people. When I chose Jekyll it was mostly because of it's active community and the fact that it is developed and used heavily by Github. Before I settled on Jekyll I gave nanoc a try. I don't exactly remember why I ditched nanoc but in the end Jekyll feels lighter and I also prefer Liquid Markup over ERB Syntax.&lt;/p&gt;&lt;h2&gt;Setting Up Amazon S3&lt;/h2&gt;&lt;p&gt;Comparing Github's free hosting with Amazon S3 is somewhat unfair since you got to pay for S3 storage and bandwith. Doing the math however you'll quickly notice that the price for hosting your static site on S3 is low. With a complete page size of 100M and traffic of 10G you would not pay more than 2$.&lt;/p&gt;&lt;p&gt;After creating a new bucket in your S3 instance there are only a few steps you need to do in order to have a proper static site hosted by S3.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When creating your bucket make sure that it has the same name as the domain name you want to use for your static site (ex. www.martinklepsch.org). This domain has to have some subdomain.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Enable S3's website feature by enabling it in the properties pane of your bucket.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt; &lt;img alt="Website settings in the bucket propertie pane" src="/images/website-settings-s3.png"&gt; &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Set a bucket policy that basically allows everyone to view the contents of your bucket.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Version&amp;quot;:&amp;quot;2008-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;:[{
    &amp;quot;Sid&amp;quot;:&amp;quot;PublicReadForGetBucketObjects&amp;quot;,
    &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
    &amp;quot;Principal&amp;quot;: {
      &amp;quot;AWS&amp;quot;: &amp;quot;*&amp;quot;
    },
    &amp;quot;Action&amp;quot;:[&amp;quot;s3:GetObject&amp;quot;],
    &amp;quot;Resource&amp;quot;:[&amp;quot;arn:aws:s3:::www.REPLACE-THIS.org/*&amp;quot;]
  }]
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Upload your static website to S3. You can either do that manually by using the AWS Management Console or you can automate the process by writing some small programm. There are S3 libraries for many programming languages. I built a &lt;a href="https://github.com/martinklepsch/martinklepsch.org/blob/master/Rakefile" title="Rakefile on Github"&gt;small rake task&lt;/a&gt; that does the job.&lt;/p&gt;&lt;p&gt;If you are experiencing problems with the setup of S3 I recommend the official &lt;a href="http://docs.amazonwebservices.com/AmazonS3/latest/dev/WebsiteHosting.html" title="AWS Static Website Hosting Documentation"&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Naked Domain Name Fowarding&lt;/h2&gt;&lt;p&gt;DNS does not allow to set the whats apparently called &amp;quot;zone apex&amp;quot; (&lt;code&gt;&amp;quot;example.com&amp;quot;&lt;/code&gt;) to be a CNAME for another domain like &lt;code&gt;www.example.com.s3-website-us-east-1.amazonaws.com&lt;/code&gt;. Therefore you need to redirect all requests going to your domain without &lt;code&gt;www&lt;/code&gt; to you domain with &lt;code&gt;www&lt;/code&gt; (&lt;code&gt;example.com&lt;/code&gt; to &lt;code&gt;www.example.com&lt;/code&gt;). &lt;a href="https://forums.aws.amazon.com/thread.jspa?threadID=55995" title="A thread in AWS forums with good information about the issue"&gt;Read more.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;You can either do this by using your domain registrars control panel or by using a service like &lt;a href="http://wwwizer.com/naked-domain-redirect"&gt;wwwizer&lt;/a&gt;. I did it with &lt;a href="http://gandi.net"&gt;Gandi&lt;/a&gt;'s control panel and it works fine.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry><entry><id>urn:uuid:6ff5c174-6f89-4449-9a6c-2315bedaed33</id><title>Exim4 Fix Wrongly Decoded Mail Subject</title><published>2012-01-28T00:00:00.00Z</published><updated>2012-01-28T00:00:00.00Z</updated><link href="https://www.martinklepsch.org/posts/fix-broken-decoding-of-mail-subjects-in-exim.html" type="text/html" title="Exim4 Fix Wrongly Decoded Mail Subject" rel="alternate"/><content type="html" xml:base="https://www.martinklepsch.org/posts/fix-broken-decoding-of-mail-subjects-in-exim.html">&lt;h1&gt;Exim4 Fix Wrongly Decoded Mail Subject&lt;/h1&gt;&lt;p&gt;If you are using &lt;a href="http://www.exim.org/"&gt;Exim&lt;/a&gt; to transfer mails generated by internal software you probably often get mails with a really weird looking subject that starts with something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;=?utf-8?Q?=5BPersonalverwaltung_=2D_Fehler_=23=31=37=38=5D_...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This problem arises when some system sends an email with &lt;strong&gt;more than 76 characters in the subject line&lt;/strong&gt; (usually people don't do that).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; While there is no limit to the length of a multiple-line header field,  each line of a header field that contains one or more  encoded-word's is limited to 76 characters. &lt;/p&gt;&lt;p&gt; The length restrictions are included both to ease interoperability  through internetwork mail gateways, and to impose a limit on the  amount of lookahead a header parser must employ (while looking for a  final ?= delimiter) before it can decide whether a token is an  &amp;quot;encoded-word&amp;quot; or something else. &lt;/p&gt;&lt;p&gt; &lt;cite&gt;Excerpt from &lt;a href="http://www.ietf.org/rfc/rfc2047.txt"&gt;RFC2047&lt;/a&gt;&lt;/cite&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Fix It&lt;/h2&gt;&lt;p&gt;You can remove the length checking by adding the following to the main section of your &lt;code&gt;/etc/exim4/exim4.conf&lt;/code&gt;. The main section usually ends with the first &lt;code&gt;begin&lt;/code&gt; in that file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;check_rfc2047_length = false&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For further reference I recommend the official &lt;a href="http://www.exim.org/exim-html-current/doc/html/spec_html/ch14.html"&gt;Exim documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/martinklepsch"&gt;reply on twitter&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Klepsch</name><email>martinklepsch@googlemail.com</email></author></entry></feed>